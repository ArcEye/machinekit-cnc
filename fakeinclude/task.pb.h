// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2ftask_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace machinetalk {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

class TaskPlanBlockDelete;
class TaskPlanExecute;
class TaskPlanOpen;
class TaskPlanOptionalStop;
class TaskPlanReply;
class TaskReply;
class TicketUpdate;

// ===================================================================

class TaskPlanExecute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskPlanExecute) */ {
 public:
  TaskPlanExecute();
  virtual ~TaskPlanExecute();

  TaskPlanExecute(const TaskPlanExecute& from);

  inline TaskPlanExecute& operator=(const TaskPlanExecute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPlanExecute& default_instance();

  void Swap(TaskPlanExecute* other);

  // implements Message ----------------------------------------------

  inline TaskPlanExecute* New() const { return New(NULL); }

  TaskPlanExecute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskPlanExecute& from);
  void MergeFrom(const TaskPlanExecute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskPlanExecute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string command = 10;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 10;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // optional sfixed32 line = 30;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 30;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskPlanExecute)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::int32 line_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskPlanExecute* default_instance_;
};
// -------------------------------------------------------------------

class TaskPlanBlockDelete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskPlanBlockDelete) */ {
 public:
  TaskPlanBlockDelete();
  virtual ~TaskPlanBlockDelete();

  TaskPlanBlockDelete(const TaskPlanBlockDelete& from);

  inline TaskPlanBlockDelete& operator=(const TaskPlanBlockDelete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPlanBlockDelete& default_instance();

  void Swap(TaskPlanBlockDelete* other);

  // implements Message ----------------------------------------------

  inline TaskPlanBlockDelete* New() const { return New(NULL); }

  TaskPlanBlockDelete* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskPlanBlockDelete& from);
  void MergeFrom(const TaskPlanBlockDelete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskPlanBlockDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool state = 10;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 10;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskPlanBlockDelete)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool state_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskPlanBlockDelete* default_instance_;
};
// -------------------------------------------------------------------

class TaskPlanOptionalStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskPlanOptionalStop) */ {
 public:
  TaskPlanOptionalStop();
  virtual ~TaskPlanOptionalStop();

  TaskPlanOptionalStop(const TaskPlanOptionalStop& from);

  inline TaskPlanOptionalStop& operator=(const TaskPlanOptionalStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPlanOptionalStop& default_instance();

  void Swap(TaskPlanOptionalStop* other);

  // implements Message ----------------------------------------------

  inline TaskPlanOptionalStop* New() const { return New(NULL); }

  TaskPlanOptionalStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskPlanOptionalStop& from);
  void MergeFrom(const TaskPlanOptionalStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskPlanOptionalStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool state = 10;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 10;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskPlanOptionalStop)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool state_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskPlanOptionalStop* default_instance_;
};
// -------------------------------------------------------------------

class TaskPlanOpen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskPlanOpen) */ {
 public:
  TaskPlanOpen();
  virtual ~TaskPlanOpen();

  TaskPlanOpen(const TaskPlanOpen& from);

  inline TaskPlanOpen& operator=(const TaskPlanOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPlanOpen& default_instance();

  void Swap(TaskPlanOpen* other);

  // implements Message ----------------------------------------------

  inline TaskPlanOpen* New() const { return New(NULL); }

  TaskPlanOpen* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskPlanOpen& from);
  void MergeFrom(const TaskPlanOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskPlanOpen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 10;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 10;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskPlanOpen)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskPlanOpen* default_instance_;
};
// -------------------------------------------------------------------

class TaskPlanReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskPlanReply) */ {
 public:
  TaskPlanReply();
  virtual ~TaskPlanReply();

  TaskPlanReply(const TaskPlanReply& from);

  inline TaskPlanReply& operator=(const TaskPlanReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskPlanReply& default_instance();

  void Swap(TaskPlanReply* other);

  // implements Message ----------------------------------------------

  inline TaskPlanReply* New() const { return New(NULL); }

  TaskPlanReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskPlanReply& from);
  void MergeFrom(const TaskPlanReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskPlanReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machinetalk.ContainerType cmd = 10;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 10;
  ::machinetalk::ContainerType cmd() const;
  void set_cmd(::machinetalk::ContainerType value);

  // optional string errormsg = 20;
  bool has_errormsg() const;
  void clear_errormsg();
  static const int kErrormsgFieldNumber = 20;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskPlanReply)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  int cmd_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskPlanReply* default_instance_;
};
// -------------------------------------------------------------------

class TaskReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TaskReply) */ {
 public:
  TaskReply();
  virtual ~TaskReply();

  TaskReply(const TaskReply& from);

  inline TaskReply& operator=(const TaskReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskReply& default_instance();

  void Swap(TaskReply* other);

  // implements Message ----------------------------------------------

  inline TaskReply* New() const { return New(NULL); }

  TaskReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskReply& from);
  void MergeFrom(const TaskReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 ticket = 10;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 10;
  ::google::protobuf::uint32 ticket() const;
  void set_ticket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.TaskReply)
 private:
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ticket_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TaskReply* default_instance_;
};
// -------------------------------------------------------------------

class TicketUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.TicketUpdate) */ {
 public:
  TicketUpdate();
  virtual ~TicketUpdate();

  TicketUpdate(const TicketUpdate& from);

  inline TicketUpdate& operator=(const TicketUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TicketUpdate& default_instance();

  void Swap(TicketUpdate* other);

  // implements Message ----------------------------------------------

  inline TicketUpdate* New() const { return New(NULL); }

  TicketUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TicketUpdate& from);
  void MergeFrom(const TicketUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TicketUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 cticket = 10;
  bool has_cticket() const;
  void clear_cticket();
  static const int kCticketFieldNumber = 10;
  ::google::protobuf::uint32 cticket() const;
  void set_cticket(::google::protobuf::uint32 value);

  // required .machinetalk.RCS_STATUS status = 20;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 20;
  ::machinetalk::RCS_STATUS status() const;
  void set_status(::machinetalk::RCS_STATUS value);

  // optional string text = 30;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 30;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:machinetalk.TicketUpdate)
 private:
  inline void set_has_cticket();
  inline void clear_has_cticket();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_text();
  inline void clear_has_text();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cticket_;
  int status_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftask_2eproto();

  void InitAsDefaultInstance();
  static TicketUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskPlanExecute

// optional string command = 10;
inline bool TaskPlanExecute::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskPlanExecute::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskPlanExecute::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskPlanExecute::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& TaskPlanExecute::command() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanExecute.command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanExecute::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanExecute.command)
}
inline void TaskPlanExecute::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.TaskPlanExecute.command)
}
inline void TaskPlanExecute::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.TaskPlanExecute.command)
}
inline ::std::string* TaskPlanExecute::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:machinetalk.TaskPlanExecute.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskPlanExecute::release_command() {
  // @@protoc_insertion_point(field_release:machinetalk.TaskPlanExecute.command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanExecute::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.TaskPlanExecute.command)
}

// optional sfixed32 line = 30;
inline bool TaskPlanExecute::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskPlanExecute::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskPlanExecute::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskPlanExecute::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 TaskPlanExecute::line() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanExecute.line)
  return line_;
}
inline void TaskPlanExecute::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanExecute.line)
}

// -------------------------------------------------------------------

// TaskPlanBlockDelete

// required bool state = 10;
inline bool TaskPlanBlockDelete::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskPlanBlockDelete::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskPlanBlockDelete::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskPlanBlockDelete::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool TaskPlanBlockDelete::state() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanBlockDelete.state)
  return state_;
}
inline void TaskPlanBlockDelete::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanBlockDelete.state)
}

// -------------------------------------------------------------------

// TaskPlanOptionalStop

// required bool state = 10;
inline bool TaskPlanOptionalStop::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskPlanOptionalStop::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskPlanOptionalStop::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskPlanOptionalStop::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool TaskPlanOptionalStop::state() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanOptionalStop.state)
  return state_;
}
inline void TaskPlanOptionalStop::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanOptionalStop.state)
}

// -------------------------------------------------------------------

// TaskPlanOpen

// required string filename = 10;
inline bool TaskPlanOpen::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskPlanOpen::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskPlanOpen::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskPlanOpen::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& TaskPlanOpen::filename() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanOpen.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanOpen::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanOpen.filename)
}
inline void TaskPlanOpen::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.TaskPlanOpen.filename)
}
inline void TaskPlanOpen::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.TaskPlanOpen.filename)
}
inline ::std::string* TaskPlanOpen::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:machinetalk.TaskPlanOpen.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskPlanOpen::release_filename() {
  // @@protoc_insertion_point(field_release:machinetalk.TaskPlanOpen.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanOpen::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.TaskPlanOpen.filename)
}

// -------------------------------------------------------------------

// TaskPlanReply

// required .machinetalk.ContainerType cmd = 10;
inline bool TaskPlanReply::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskPlanReply::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskPlanReply::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskPlanReply::clear_cmd() {
  cmd_ = 2;
  clear_has_cmd();
}
inline ::machinetalk::ContainerType TaskPlanReply::cmd() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanReply.cmd)
  return static_cast< ::machinetalk::ContainerType >(cmd_);
}
inline void TaskPlanReply::set_cmd(::machinetalk::ContainerType value) {
  assert(::machinetalk::ContainerType_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanReply.cmd)
}

// optional string errormsg = 20;
inline bool TaskPlanReply::has_errormsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskPlanReply::set_has_errormsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskPlanReply::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskPlanReply::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormsg();
}
inline const ::std::string& TaskPlanReply::errormsg() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskPlanReply.errormsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanReply::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.TaskPlanReply.errormsg)
}
inline void TaskPlanReply::set_errormsg(const char* value) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.TaskPlanReply.errormsg)
}
inline void TaskPlanReply::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.TaskPlanReply.errormsg)
}
inline ::std::string* TaskPlanReply::mutable_errormsg() {
  set_has_errormsg();
  // @@protoc_insertion_point(field_mutable:machinetalk.TaskPlanReply.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskPlanReply::release_errormsg() {
  // @@protoc_insertion_point(field_release:machinetalk.TaskPlanReply.errormsg)
  clear_has_errormsg();
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskPlanReply::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    set_has_errormsg();
  } else {
    clear_has_errormsg();
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.TaskPlanReply.errormsg)
}

// -------------------------------------------------------------------

// TaskReply

// required fixed32 ticket = 10;
inline bool TaskReply::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskReply::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskReply::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskReply::clear_ticket() {
  ticket_ = 0u;
  clear_has_ticket();
}
inline ::google::protobuf::uint32 TaskReply::ticket() const {
  // @@protoc_insertion_point(field_get:machinetalk.TaskReply.ticket)
  return ticket_;
}
inline void TaskReply::set_ticket(::google::protobuf::uint32 value) {
  set_has_ticket();
  ticket_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TaskReply.ticket)
}

// -------------------------------------------------------------------

// TicketUpdate

// required fixed32 cticket = 10;
inline bool TicketUpdate::has_cticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TicketUpdate::set_has_cticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TicketUpdate::clear_has_cticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TicketUpdate::clear_cticket() {
  cticket_ = 0u;
  clear_has_cticket();
}
inline ::google::protobuf::uint32 TicketUpdate::cticket() const {
  // @@protoc_insertion_point(field_get:machinetalk.TicketUpdate.cticket)
  return cticket_;
}
inline void TicketUpdate::set_cticket(::google::protobuf::uint32 value) {
  set_has_cticket();
  cticket_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TicketUpdate.cticket)
}

// required .machinetalk.RCS_STATUS status = 20;
inline bool TicketUpdate::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TicketUpdate::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TicketUpdate::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TicketUpdate::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::machinetalk::RCS_STATUS TicketUpdate::status() const {
  // @@protoc_insertion_point(field_get:machinetalk.TicketUpdate.status)
  return static_cast< ::machinetalk::RCS_STATUS >(status_);
}
inline void TicketUpdate::set_status(::machinetalk::RCS_STATUS value) {
  assert(::machinetalk::RCS_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.TicketUpdate.status)
}

// optional string text = 30;
inline bool TicketUpdate::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TicketUpdate::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TicketUpdate::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TicketUpdate::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& TicketUpdate::text() const {
  // @@protoc_insertion_point(field_get:machinetalk.TicketUpdate.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TicketUpdate::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.TicketUpdate.text)
}
inline void TicketUpdate::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.TicketUpdate.text)
}
inline void TicketUpdate::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.TicketUpdate.text)
}
inline ::std::string* TicketUpdate::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:machinetalk.TicketUpdate.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TicketUpdate::release_text() {
  // @@protoc_insertion_point(field_release:machinetalk.TicketUpdate.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TicketUpdate::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.TicketUpdate.text)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2ftask_2eproto__INCLUDED
