// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/test.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2ftest_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2ftest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/emcclass.pb.h"
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2ftest_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2ftest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2ftest_2eproto
namespace machinetalk {
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
class Test2;
class Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test3;
class Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::Test1* Arena::CreateMaybeMessage<::machinetalk::Test1>(Arena*);
template<> ::machinetalk::Test2* Arena::CreateMaybeMessage<::machinetalk::Test2>(Arena*);
template<> ::machinetalk::Test3* Arena::CreateMaybeMessage<::machinetalk::Test3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

enum TestOpType {
  LINE = 10,
  CIRCLE = 20
};
bool TestOpType_IsValid(int value);
const TestOpType TestOpType_MIN = LINE;
const TestOpType TestOpType_MAX = CIRCLE;
const int TestOpType_ARRAYSIZE = TestOpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestOpType_descriptor();
inline const ::std::string& TestOpType_Name(TestOpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestOpType_descriptor(), value);
}
inline bool TestOpType_Parse(
    const ::std::string& name, TestOpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestOpType>(
    TestOpType_descriptor(), name, value);
}
// ===================================================================

class Test1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Test1) */ {
 public:
  Test1();
  virtual ~Test1();

  Test1(const Test1& from);

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Test1* other);
  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const final {
    return CreateMaybeMessage<Test1>(NULL);
  }

  Test1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machinetalk.EmcPose end = 20;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 20;
  private:
  const ::machinetalk::EmcPose& _internal_end() const;
  public:
  const ::machinetalk::EmcPose& end() const;
  ::machinetalk::EmcPose* release_end();
  ::machinetalk::EmcPose* mutable_end();
  void set_allocated_end(::machinetalk::EmcPose* end);

  // optional .machinetalk.PmCartesian center = 30;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 30;
  private:
  const ::machinetalk::PmCartesian& _internal_center() const;
  public:
  const ::machinetalk::PmCartesian& center() const;
  ::machinetalk::PmCartesian* release_center();
  ::machinetalk::PmCartesian* mutable_center();
  void set_allocated_center(::machinetalk::PmCartesian* center);

  // optional .machinetalk.PmCartesian normal = 40;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 40;
  private:
  const ::machinetalk::PmCartesian& _internal_normal() const;
  public:
  const ::machinetalk::PmCartesian& normal() const;
  ::machinetalk::PmCartesian* release_normal();
  ::machinetalk::PmCartesian* mutable_normal();
  void set_allocated_normal(::machinetalk::PmCartesian* normal);

  // optional int32 turn = 50;
  bool has_turn() const;
  void clear_turn();
  static const int kTurnFieldNumber = 50;
  ::google::protobuf::int32 turn() const;
  void set_turn(::google::protobuf::int32 value);

  // required .machinetalk.TestOpType op = 10;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 10;
  ::machinetalk::TestOpType op() const;
  void set_op(::machinetalk::TestOpType value);

  // @@protoc_insertion_point(class_scope:machinetalk.Test1)
 private:
  void set_has_op();
  void clear_has_op();
  void set_has_end();
  void clear_has_end();
  void set_has_center();
  void clear_has_center();
  void set_has_normal();
  void clear_has_normal();
  void set_has_turn();
  void clear_has_turn();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::machinetalk::EmcPose* end_;
  ::machinetalk::PmCartesian* center_;
  ::machinetalk::PmCartesian* normal_;
  ::google::protobuf::int32 turn_;
  int op_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Test2) */ {
 public:
  Test2();
  virtual ~Test2();

  Test2(const Test2& from);

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(Test2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Test2* other);
  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test2* New() const final {
    return CreateMaybeMessage<Test2>(NULL);
  }

  Test2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:machinetalk.Test2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2ftest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Test3) */ {
 public:
  Test3();
  virtual ~Test3();

  Test3(const Test3& from);

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(Test3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Test3* other);
  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test3* New() const final {
    return CreateMaybeMessage<Test3>(NULL);
  }

  Test3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test3& from);
  void MergeFrom(const Test3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:machinetalk.Test3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2ftest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test1

// required .machinetalk.TestOpType op = 10;
inline bool Test1::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Test1::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Test1::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Test1::clear_op() {
  op_ = 10;
  clear_has_op();
}
inline ::machinetalk::TestOpType Test1::op() const {
  // @@protoc_insertion_point(field_get:machinetalk.Test1.op)
  return static_cast< ::machinetalk::TestOpType >(op_);
}
inline void Test1::set_op(::machinetalk::TestOpType value) {
  assert(::machinetalk::TestOpType_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Test1.op)
}

// required .machinetalk.EmcPose end = 20;
inline bool Test1::has_end() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test1::set_has_end() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test1::clear_has_end() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::machinetalk::EmcPose& Test1::_internal_end() const {
  return *end_;
}
inline const ::machinetalk::EmcPose& Test1::end() const {
  const ::machinetalk::EmcPose* p = end_;
  // @@protoc_insertion_point(field_get:machinetalk.Test1.end)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::EmcPose*>(
      &::machinetalk::_EmcPose_default_instance_);
}
inline ::machinetalk::EmcPose* Test1::release_end() {
  // @@protoc_insertion_point(field_release:machinetalk.Test1.end)
  clear_has_end();
  ::machinetalk::EmcPose* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::machinetalk::EmcPose* Test1::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::EmcPose>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Test1.end)
  return end_;
}
inline void Test1::set_allocated_end(::machinetalk::EmcPose* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_);
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
  } else {
    clear_has_end();
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Test1.end)
}

// optional .machinetalk.PmCartesian center = 30;
inline bool Test1::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test1::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test1::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::machinetalk::PmCartesian& Test1::_internal_center() const {
  return *center_;
}
inline const ::machinetalk::PmCartesian& Test1::center() const {
  const ::machinetalk::PmCartesian* p = center_;
  // @@protoc_insertion_point(field_get:machinetalk.Test1.center)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::PmCartesian*>(
      &::machinetalk::_PmCartesian_default_instance_);
}
inline ::machinetalk::PmCartesian* Test1::release_center() {
  // @@protoc_insertion_point(field_release:machinetalk.Test1.center)
  clear_has_center();
  ::machinetalk::PmCartesian* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::machinetalk::PmCartesian* Test1::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::PmCartesian>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Test1.center)
  return center_;
}
inline void Test1::set_allocated_center(::machinetalk::PmCartesian* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(center_);
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
  } else {
    clear_has_center();
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Test1.center)
}

// optional .machinetalk.PmCartesian normal = 40;
inline bool Test1::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test1::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test1::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::machinetalk::PmCartesian& Test1::_internal_normal() const {
  return *normal_;
}
inline const ::machinetalk::PmCartesian& Test1::normal() const {
  const ::machinetalk::PmCartesian* p = normal_;
  // @@protoc_insertion_point(field_get:machinetalk.Test1.normal)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::PmCartesian*>(
      &::machinetalk::_PmCartesian_default_instance_);
}
inline ::machinetalk::PmCartesian* Test1::release_normal() {
  // @@protoc_insertion_point(field_release:machinetalk.Test1.normal)
  clear_has_normal();
  ::machinetalk::PmCartesian* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline ::machinetalk::PmCartesian* Test1::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::PmCartesian>(GetArenaNoVirtual());
    normal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Test1.normal)
  return normal_;
}
inline void Test1::set_allocated_normal(::machinetalk::PmCartesian* normal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(normal_);
  }
  if (normal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    set_has_normal();
  } else {
    clear_has_normal();
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Test1.normal)
}

// optional int32 turn = 50;
inline bool Test1::has_turn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test1::set_has_turn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test1::clear_has_turn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test1::clear_turn() {
  turn_ = 0;
  clear_has_turn();
}
inline ::google::protobuf::int32 Test1::turn() const {
  // @@protoc_insertion_point(field_get:machinetalk.Test1.turn)
  return turn_;
}
inline void Test1::set_turn(::google::protobuf::int32 value) {
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Test1.turn)
}

// -------------------------------------------------------------------

// Test2

// -------------------------------------------------------------------

// Test3

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::machinetalk::TestOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::machinetalk::TestOpType>() {
  return ::machinetalk::TestOpType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2ftest_2eproto
