
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace machinetalk {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

class Application;
class File;
class Launcher;
class MachineInfo;
class StdoutLine;

enum ApplicationType {
  QT5_QML = 1,
  GLADEVCP = 2,
  JAVASCRIPT = 3
};
bool ApplicationType_IsValid(int value);
const ApplicationType ApplicationType_MIN = QT5_QML;
const ApplicationType ApplicationType_MAX = JAVASCRIPT;
const int ApplicationType_ARRAYSIZE = ApplicationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplicationType_descriptor();
inline const ::std::string& ApplicationType_Name(ApplicationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplicationType_descriptor(), value);
}
inline bool ApplicationType_Parse(
    const ::std::string& name, ApplicationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplicationType>(
    ApplicationType_descriptor(), name, value);
}
enum FileContent {
  CLEARTEXT = 1,
  ZLIB = 2
};
bool FileContent_IsValid(int value);
const FileContent FileContent_MIN = CLEARTEXT;
const FileContent FileContent_MAX = ZLIB;
const int FileContent_ARRAYSIZE = FileContent_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileContent_descriptor();
inline const ::std::string& FileContent_Name(FileContent value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileContent_descriptor(), value);
}
inline bool FileContent_Parse(
    const ::std::string& name, FileContent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileContent>(
    FileContent_descriptor(), name, value);
}
// ===================================================================

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  inline File* New() const { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .machinetalk.FileContent encoding = 2;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::machinetalk::FileContent encoding() const;
  void set_encoding(::machinetalk::FileContent value);

  // optional bytes blob = 3;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 3;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  // @@protoc_insertion_point(class_scope:machinetalk.File)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_encoding();
  inline void clear_has_encoding();
  inline void set_has_blob();
  inline void clear_has_blob();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
  int encoding_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Application) */ {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();

  void Swap(Application* other);

  // implements Message ----------------------------------------------

  inline Application* New() const { return New(NULL); }

  Application* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Application* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .machinetalk.ApplicationType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::machinetalk::ApplicationType type() const;
  void set_type(::machinetalk::ApplicationType value);

  // optional string weburi = 4;
  bool has_weburi() const;
  void clear_weburi();
  static const int kWeburiFieldNumber = 4;
  const ::std::string& weburi() const;
  void set_weburi(const ::std::string& value);
  void set_weburi(const char* value);
  void set_weburi(const char* value, size_t size);
  ::std::string* mutable_weburi();
  ::std::string* release_weburi();
  void set_allocated_weburi(::std::string* weburi);

  // repeated .machinetalk.File file = 5;
  int file_size() const;
  void clear_file();
  static const int kFileFieldNumber = 5;
  const ::machinetalk::File& file(int index) const;
  ::machinetalk::File* mutable_file(int index);
  ::machinetalk::File* add_file();
  ::google::protobuf::RepeatedPtrField< ::machinetalk::File >*
      mutable_file();
  const ::google::protobuf::RepeatedPtrField< ::machinetalk::File >&
      file() const;

  // @@protoc_insertion_point(class_scope:machinetalk.Application)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weburi();
  inline void clear_has_weburi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr weburi_;
  ::google::protobuf::RepeatedPtrField< ::machinetalk::File > file_;
  int type_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Application* default_instance_;
};
// -------------------------------------------------------------------

class StdoutLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.StdoutLine) */ {
 public:
  StdoutLine();
  virtual ~StdoutLine();

  StdoutLine(const StdoutLine& from);

  inline StdoutLine& operator=(const StdoutLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StdoutLine& default_instance();

  void Swap(StdoutLine* other);

  // implements Message ----------------------------------------------

  inline StdoutLine* New() const { return New(NULL); }

  StdoutLine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StdoutLine& from);
  void MergeFrom(const StdoutLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StdoutLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional string line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  const ::std::string& line() const;
  void set_line(const ::std::string& value);
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  ::std::string* mutable_line();
  ::std::string* release_line();
  void set_allocated_line(::std::string* line);

  // @@protoc_insertion_point(class_scope:machinetalk.StdoutLine)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr line_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static StdoutLine* default_instance_;
};
// -------------------------------------------------------------------

class MachineInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.MachineInfo) */ {
 public:
  MachineInfo();
  virtual ~MachineInfo();

  MachineInfo(const MachineInfo& from);

  inline MachineInfo& operator=(const MachineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineInfo& default_instance();

  void Swap(MachineInfo* other);

  // implements Message ----------------------------------------------

  inline MachineInfo* New() const { return New(NULL); }

  MachineInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineInfo& from);
  void MergeFrom(const MachineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MachineInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string manufacturer = 2;
  bool has_manufacturer() const;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 2;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // optional string model = 3;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional string variant = 4;
  bool has_variant() const;
  void clear_variant();
  static const int kVariantFieldNumber = 4;
  const ::std::string& variant() const;
  void set_variant(const ::std::string& value);
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  ::std::string* mutable_variant();
  ::std::string* release_variant();
  void set_allocated_variant(::std::string* variant);

  // @@protoc_insertion_point(class_scope:machinetalk.MachineInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_variant();
  inline void clear_has_variant();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr variant_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static MachineInfo* default_instance_;
};
// -------------------------------------------------------------------

class Launcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Launcher) */ {
 public:
  Launcher();
  virtual ~Launcher();

  Launcher(const Launcher& from);

  inline Launcher& operator=(const Launcher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Launcher& default_instance();

  void Swap(Launcher* other);

  // implements Message ----------------------------------------------

  inline Launcher* New() const { return New(NULL); }

  Launcher* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Launcher& from);
  void MergeFrom(const Launcher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Launcher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .machinetalk.File image = 4;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 4;
  const ::machinetalk::File& image() const;
  ::machinetalk::File* mutable_image();
  ::machinetalk::File* release_image();
  void set_allocated_image(::machinetalk::File* image);

  // optional .machinetalk.MachineInfo info = 5;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 5;
  const ::machinetalk::MachineInfo& info() const;
  ::machinetalk::MachineInfo* mutable_info();
  ::machinetalk::MachineInfo* release_info();
  void set_allocated_info(::machinetalk::MachineInfo* info);

  // optional bool running = 6;
  bool has_running() const;
  void clear_running();
  static const int kRunningFieldNumber = 6;
  bool running() const;
  void set_running(bool value);

  // optional bool terminating = 7;
  bool has_terminating() const;
  void clear_terminating();
  static const int kTerminatingFieldNumber = 7;
  bool terminating() const;
  void set_terminating(bool value);

  // optional string command = 8;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 8;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // optional bool shell = 9;
  bool has_shell() const;
  void clear_shell();
  static const int kShellFieldNumber = 9;
  bool shell() const;
  void set_shell(bool value);

  // repeated .machinetalk.StdoutLine output = 10;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 10;
  const ::machinetalk::StdoutLine& output(int index) const;
  ::machinetalk::StdoutLine* mutable_output(int index);
  ::machinetalk::StdoutLine* add_output();
  ::google::protobuf::RepeatedPtrField< ::machinetalk::StdoutLine >*
      mutable_output();
  const ::google::protobuf::RepeatedPtrField< ::machinetalk::StdoutLine >&
      output() const;

  // optional int32 returncode = 11;
  bool has_returncode() const;
  void clear_returncode();
  static const int kReturncodeFieldNumber = 11;
  ::google::protobuf::int32 returncode() const;
  void set_returncode(::google::protobuf::int32 value);

  // optional string workdir = 12;
  bool has_workdir() const;
  void clear_workdir();
  static const int kWorkdirFieldNumber = 12;
  const ::std::string& workdir() const;
  void set_workdir(const ::std::string& value);
  void set_workdir(const char* value);
  void set_workdir(const char* value, size_t size);
  ::std::string* mutable_workdir();
  ::std::string* release_workdir();
  void set_allocated_workdir(::std::string* workdir);

  // optional uint32 priority = 13;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // optional uint32 importance = 14;
  bool has_importance() const;
  void clear_importance();
  static const int kImportanceFieldNumber = 14;
  ::google::protobuf::uint32 importance() const;
  void set_importance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.Launcher)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_running();
  inline void clear_has_running();
  inline void set_has_terminating();
  inline void clear_has_terminating();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_shell();
  inline void clear_has_shell();
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_workdir();
  inline void clear_has_workdir();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_importance();
  inline void clear_has_importance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::machinetalk::File* image_;
  ::machinetalk::MachineInfo* info_;
  ::google::protobuf::int32 index_;
  bool running_;
  bool terminating_;
  bool shell_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::RepeatedPtrField< ::machinetalk::StdoutLine > output_;
  ::google::protobuf::internal::ArenaStringPtr workdir_;
  ::google::protobuf::int32 returncode_;
  ::google::protobuf::uint32 priority_;
  ::google::protobuf::uint32 importance_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Launcher* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// File

// required string name = 1;
inline bool File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:machinetalk.File.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.File.name)
}
inline void File::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.File.name)
}
inline ::std::string* File::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:machinetalk.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:machinetalk.File.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.File.name)
}

// required .machinetalk.FileContent encoding = 2;
inline bool File::has_encoding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_encoding() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_encoding() {
  encoding_ = 1;
  clear_has_encoding();
}
inline ::machinetalk::FileContent File::encoding() const {
  // @@protoc_insertion_point(field_get:machinetalk.File.encoding)
  return static_cast< ::machinetalk::FileContent >(encoding_);
}
inline void File::set_encoding(::machinetalk::FileContent value) {
  assert(::machinetalk::FileContent_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.File.encoding)
}

// optional bytes blob = 3;
inline bool File::has_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blob();
}
inline const ::std::string& File::blob() const {
  // @@protoc_insertion_point(field_get:machinetalk.File.blob)
  return blob_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_blob(const ::std::string& value) {
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.File.blob)
}
inline void File::set_blob(const char* value) {
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.File.blob)
}
inline void File::set_blob(const void* value, size_t size) {
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.File.blob)
}
inline ::std::string* File::mutable_blob() {
  set_has_blob();
  // @@protoc_insertion_point(field_mutable:machinetalk.File.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_blob() {
  // @@protoc_insertion_point(field_release:machinetalk.File.blob)
  clear_has_blob();
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    set_has_blob();
  } else {
    clear_has_blob();
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.File.blob)
}

// -------------------------------------------------------------------

// Application

// required string name = 1;
inline bool Application::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Application::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Application::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Application::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Application::name() const {
  // @@protoc_insertion_point(field_get:machinetalk.Application.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Application.name)
}
inline void Application::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Application.name)
}
inline void Application::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Application.name)
}
inline ::std::string* Application::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:machinetalk.Application.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_name() {
  // @@protoc_insertion_point(field_release:machinetalk.Application.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Application.name)
}

// optional string description = 2;
inline bool Application::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Application::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Application::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Application::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Application::description() const {
  // @@protoc_insertion_point(field_get:machinetalk.Application.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Application.description)
}
inline void Application::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Application.description)
}
inline void Application::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Application.description)
}
inline ::std::string* Application::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:machinetalk.Application.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_description() {
  // @@protoc_insertion_point(field_release:machinetalk.Application.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Application.description)
}

// optional .machinetalk.ApplicationType type = 3;
inline bool Application::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Application::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Application::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Application::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::machinetalk::ApplicationType Application::type() const {
  // @@protoc_insertion_point(field_get:machinetalk.Application.type)
  return static_cast< ::machinetalk::ApplicationType >(type_);
}
inline void Application::set_type(::machinetalk::ApplicationType value) {
  assert(::machinetalk::ApplicationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Application.type)
}

// optional string weburi = 4;
inline bool Application::has_weburi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Application::set_has_weburi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Application::clear_has_weburi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Application::clear_weburi() {
  weburi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weburi();
}
inline const ::std::string& Application::weburi() const {
  // @@protoc_insertion_point(field_get:machinetalk.Application.weburi)
  return weburi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_weburi(const ::std::string& value) {
  set_has_weburi();
  weburi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Application.weburi)
}
inline void Application::set_weburi(const char* value) {
  set_has_weburi();
  weburi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Application.weburi)
}
inline void Application::set_weburi(const char* value, size_t size) {
  set_has_weburi();
  weburi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Application.weburi)
}
inline ::std::string* Application::mutable_weburi() {
  set_has_weburi();
  // @@protoc_insertion_point(field_mutable:machinetalk.Application.weburi)
  return weburi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_weburi() {
  // @@protoc_insertion_point(field_release:machinetalk.Application.weburi)
  clear_has_weburi();
  return weburi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_weburi(::std::string* weburi) {
  if (weburi != NULL) {
    set_has_weburi();
  } else {
    clear_has_weburi();
  }
  weburi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weburi);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Application.weburi)
}

// repeated .machinetalk.File file = 5;
inline int Application::file_size() const {
  return file_.size();
}
inline void Application::clear_file() {
  file_.Clear();
}
inline const ::machinetalk::File& Application::file(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.Application.file)
  return file_.Get(index);
}
inline ::machinetalk::File* Application::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.Application.file)
  return file_.Mutable(index);
}
inline ::machinetalk::File* Application::add_file() {
  // @@protoc_insertion_point(field_add:machinetalk.Application.file)
  return file_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::machinetalk::File >*
Application::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.Application.file)
  return &file_;
}
inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::File >&
Application::file() const {
  // @@protoc_insertion_point(field_list:machinetalk.Application.file)
  return file_;
}

// -------------------------------------------------------------------

// StdoutLine

// required int32 index = 1;
inline bool StdoutLine::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StdoutLine::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StdoutLine::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StdoutLine::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 StdoutLine::index() const {
  // @@protoc_insertion_point(field_get:machinetalk.StdoutLine.index)
  return index_;
}
inline void StdoutLine::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.StdoutLine.index)
}

// optional string line = 2;
inline bool StdoutLine::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StdoutLine::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StdoutLine::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StdoutLine::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line();
}
inline const ::std::string& StdoutLine::line() const {
  // @@protoc_insertion_point(field_get:machinetalk.StdoutLine.line)
  return line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StdoutLine::set_line(const ::std::string& value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.StdoutLine.line)
}
inline void StdoutLine::set_line(const char* value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.StdoutLine.line)
}
inline void StdoutLine::set_line(const char* value, size_t size) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.StdoutLine.line)
}
inline ::std::string* StdoutLine::mutable_line() {
  set_has_line();
  // @@protoc_insertion_point(field_mutable:machinetalk.StdoutLine.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StdoutLine::release_line() {
  // @@protoc_insertion_point(field_release:machinetalk.StdoutLine.line)
  clear_has_line();
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StdoutLine::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    set_has_line();
  } else {
    clear_has_line();
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.StdoutLine.line)
}

// -------------------------------------------------------------------

// MachineInfo

// optional string type = 1;
inline bool MachineInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MachineInfo::type() const {
  // @@protoc_insertion_point(field_get:machinetalk.MachineInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.MachineInfo.type)
}
inline void MachineInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.MachineInfo.type)
}
inline void MachineInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.MachineInfo.type)
}
inline ::std::string* MachineInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:machinetalk.MachineInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineInfo::release_type() {
  // @@protoc_insertion_point(field_release:machinetalk.MachineInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.MachineInfo.type)
}

// optional string manufacturer = 2;
inline bool MachineInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturer();
}
inline const ::std::string& MachineInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:machinetalk.MachineInfo.manufacturer)
  return manufacturer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.MachineInfo.manufacturer)
}
inline void MachineInfo::set_manufacturer(const char* value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.MachineInfo.manufacturer)
}
inline void MachineInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.MachineInfo.manufacturer)
}
inline ::std::string* MachineInfo::mutable_manufacturer() {
  set_has_manufacturer();
  // @@protoc_insertion_point(field_mutable:machinetalk.MachineInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:machinetalk.MachineInfo.manufacturer)
  clear_has_manufacturer();
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    set_has_manufacturer();
  } else {
    clear_has_manufacturer();
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.MachineInfo.manufacturer)
}

// optional string model = 3;
inline bool MachineInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& MachineInfo::model() const {
  // @@protoc_insertion_point(field_get:machinetalk.MachineInfo.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.MachineInfo.model)
}
inline void MachineInfo::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.MachineInfo.model)
}
inline void MachineInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.MachineInfo.model)
}
inline ::std::string* MachineInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:machinetalk.MachineInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineInfo::release_model() {
  // @@protoc_insertion_point(field_release:machinetalk.MachineInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.MachineInfo.model)
}

// optional string variant = 4;
inline bool MachineInfo::has_variant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineInfo::set_has_variant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineInfo::clear_has_variant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineInfo::clear_variant() {
  variant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_variant();
}
inline const ::std::string& MachineInfo::variant() const {
  // @@protoc_insertion_point(field_get:machinetalk.MachineInfo.variant)
  return variant_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_variant(const ::std::string& value) {
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.MachineInfo.variant)
}
inline void MachineInfo::set_variant(const char* value) {
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.MachineInfo.variant)
}
inline void MachineInfo::set_variant(const char* value, size_t size) {
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.MachineInfo.variant)
}
inline ::std::string* MachineInfo::mutable_variant() {
  set_has_variant();
  // @@protoc_insertion_point(field_mutable:machinetalk.MachineInfo.variant)
  return variant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineInfo::release_variant() {
  // @@protoc_insertion_point(field_release:machinetalk.MachineInfo.variant)
  clear_has_variant();
  return variant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineInfo::set_allocated_variant(::std::string* variant) {
  if (variant != NULL) {
    set_has_variant();
  } else {
    clear_has_variant();
  }
  variant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.MachineInfo.variant)
}

// -------------------------------------------------------------------

// Launcher

// required int32 index = 1;
inline bool Launcher::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Launcher::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Launcher::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Launcher::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Launcher::index() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.index)
  return index_;
}
inline void Launcher::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.index)
}

// optional string name = 2;
inline bool Launcher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Launcher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Launcher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Launcher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Launcher::name() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.name)
}
inline void Launcher::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Launcher.name)
}
inline void Launcher::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Launcher.name)
}
inline ::std::string* Launcher::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Launcher::release_name() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.name)
}

// optional string description = 3;
inline bool Launcher::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Launcher::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Launcher::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Launcher::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Launcher::description() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.description)
}
inline void Launcher::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Launcher.description)
}
inline void Launcher::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Launcher.description)
}
inline ::std::string* Launcher::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Launcher::release_description() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.description)
}

// optional .machinetalk.File image = 4;
inline bool Launcher::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Launcher::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Launcher::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Launcher::clear_image() {
  if (image_ != NULL) image_->::machinetalk::File::Clear();
  clear_has_image();
}
inline const ::machinetalk::File& Launcher::image() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::machinetalk::File* Launcher::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::machinetalk::File;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.image)
  return image_;
}
inline ::machinetalk::File* Launcher::release_image() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.image)
  clear_has_image();
  ::machinetalk::File* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Launcher::set_allocated_image(::machinetalk::File* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.image)
}

// optional .machinetalk.MachineInfo info = 5;
inline bool Launcher::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Launcher::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Launcher::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Launcher::clear_info() {
  if (info_ != NULL) info_->::machinetalk::MachineInfo::Clear();
  clear_has_info();
}
inline const ::machinetalk::MachineInfo& Launcher::info() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::machinetalk::MachineInfo* Launcher::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::machinetalk::MachineInfo;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.info)
  return info_;
}
inline ::machinetalk::MachineInfo* Launcher::release_info() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.info)
  clear_has_info();
  ::machinetalk::MachineInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Launcher::set_allocated_info(::machinetalk::MachineInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.info)
}

// optional bool running = 6;
inline bool Launcher::has_running() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Launcher::set_has_running() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Launcher::clear_has_running() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Launcher::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool Launcher::running() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.running)
  return running_;
}
inline void Launcher::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.running)
}

// optional bool terminating = 7;
inline bool Launcher::has_terminating() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Launcher::set_has_terminating() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Launcher::clear_has_terminating() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Launcher::clear_terminating() {
  terminating_ = false;
  clear_has_terminating();
}
inline bool Launcher::terminating() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.terminating)
  return terminating_;
}
inline void Launcher::set_terminating(bool value) {
  set_has_terminating();
  terminating_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.terminating)
}

// optional string command = 8;
inline bool Launcher::has_command() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Launcher::set_has_command() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Launcher::clear_has_command() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Launcher::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& Launcher::command() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.command)
}
inline void Launcher::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Launcher.command)
}
inline void Launcher::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Launcher.command)
}
inline ::std::string* Launcher::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Launcher::release_command() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.command)
}

// optional bool shell = 9;
inline bool Launcher::has_shell() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Launcher::set_has_shell() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Launcher::clear_has_shell() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Launcher::clear_shell() {
  shell_ = false;
  clear_has_shell();
}
inline bool Launcher::shell() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.shell)
  return shell_;
}
inline void Launcher::set_shell(bool value) {
  set_has_shell();
  shell_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.shell)
}

// repeated .machinetalk.StdoutLine output = 10;
inline int Launcher::output_size() const {
  return output_.size();
}
inline void Launcher::clear_output() {
  output_.Clear();
}
inline const ::machinetalk::StdoutLine& Launcher::output(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.output)
  return output_.Get(index);
}
inline ::machinetalk::StdoutLine* Launcher::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.output)
  return output_.Mutable(index);
}
inline ::machinetalk::StdoutLine* Launcher::add_output() {
  // @@protoc_insertion_point(field_add:machinetalk.Launcher.output)
  return output_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::machinetalk::StdoutLine >*
Launcher::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.Launcher.output)
  return &output_;
}
inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::StdoutLine >&
Launcher::output() const {
  // @@protoc_insertion_point(field_list:machinetalk.Launcher.output)
  return output_;
}

// optional int32 returncode = 11;
inline bool Launcher::has_returncode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Launcher::set_has_returncode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Launcher::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Launcher::clear_returncode() {
  returncode_ = 0;
  clear_has_returncode();
}
inline ::google::protobuf::int32 Launcher::returncode() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.returncode)
  return returncode_;
}
inline void Launcher::set_returncode(::google::protobuf::int32 value) {
  set_has_returncode();
  returncode_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.returncode)
}

// optional string workdir = 12;
inline bool Launcher::has_workdir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Launcher::set_has_workdir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Launcher::clear_has_workdir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Launcher::clear_workdir() {
  workdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workdir();
}
inline const ::std::string& Launcher::workdir() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.workdir)
  return workdir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_workdir(const ::std::string& value) {
  set_has_workdir();
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.workdir)
}
inline void Launcher::set_workdir(const char* value) {
  set_has_workdir();
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Launcher.workdir)
}
inline void Launcher::set_workdir(const char* value, size_t size) {
  set_has_workdir();
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Launcher.workdir)
}
inline ::std::string* Launcher::mutable_workdir() {
  set_has_workdir();
  // @@protoc_insertion_point(field_mutable:machinetalk.Launcher.workdir)
  return workdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Launcher::release_workdir() {
  // @@protoc_insertion_point(field_release:machinetalk.Launcher.workdir)
  clear_has_workdir();
  return workdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Launcher::set_allocated_workdir(::std::string* workdir) {
  if (workdir != NULL) {
    set_has_workdir();
  } else {
    clear_has_workdir();
  }
  workdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workdir);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Launcher.workdir)
}

// optional uint32 priority = 13;
inline bool Launcher::has_priority() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Launcher::set_has_priority() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Launcher::clear_has_priority() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Launcher::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 Launcher::priority() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.priority)
  return priority_;
}
inline void Launcher::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.priority)
}

// optional uint32 importance = 14;
inline bool Launcher::has_importance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Launcher::set_has_importance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Launcher::clear_has_importance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Launcher::clear_importance() {
  importance_ = 0u;
  clear_has_importance();
}
inline ::google::protobuf::uint32 Launcher::importance() const {
  // @@protoc_insertion_point(field_get:machinetalk.Launcher.importance)
  return importance_;
}
inline void Launcher::set_importance(::google::protobuf::uint32 value) {
  set_has_importance();
  importance_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Launcher.importance)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::machinetalk::ApplicationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::machinetalk::ApplicationType>() {
  return ::machinetalk::ApplicationType_descriptor();
}
template <> struct is_proto_enum< ::machinetalk::FileContent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::machinetalk::FileContent>() {
  return ::machinetalk::FileContent_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED
