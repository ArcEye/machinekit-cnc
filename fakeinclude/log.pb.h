// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/log.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2flog_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
#include "machinetalk/protobuf/types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2flog_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2flog_2eproto
namespace machinetalk {
class LogMessage;
class LogMessageDefaultTypeInternal;
extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::LogMessage* Arena::CreateMaybeMessage<::machinetalk::LogMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class LogMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.LogMessage) */ {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogMessage(LogMessage&& from) noexcept
    : LogMessage() {
    *this = ::std::move(from);
  }

  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
               &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogMessage* other);
  friend void swap(LogMessage& a, LogMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogMessage* New() const final {
    return CreateMaybeMessage<LogMessage>(NULL);
  }

  LogMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tag = 40;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 40;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // required string text = 50;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 50;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required .machinetalk.MsgLevel level = 30;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 30;
  ::machinetalk::MsgLevel level() const;
  void set_level(::machinetalk::MsgLevel value);

  // required .machinetalk.MsgOrigin origin = 10;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 10;
  ::machinetalk::MsgOrigin origin() const;
  void set_origin(::machinetalk::MsgOrigin value);

  // required int32 pid = 20;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 20;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.LogMessage)
 private:
  void set_has_origin();
  void clear_has_origin();
  void set_has_pid();
  void clear_has_pid();
  void set_has_level();
  void clear_has_level();
  void set_has_tag();
  void clear_has_tag();
  void set_has_text();
  void clear_has_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int level_;
  int origin_;
  ::google::protobuf::int32 pid_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMessage

// required .machinetalk.MsgOrigin origin = 10;
inline bool LogMessage::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMessage::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMessage::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMessage::clear_origin() {
  origin_ = 0;
  clear_has_origin();
}
inline ::machinetalk::MsgOrigin LogMessage::origin() const {
  // @@protoc_insertion_point(field_get:machinetalk.LogMessage.origin)
  return static_cast< ::machinetalk::MsgOrigin >(origin_);
}
inline void LogMessage::set_origin(::machinetalk::MsgOrigin value) {
  assert(::machinetalk::MsgOrigin_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.LogMessage.origin)
}

// required int32 pid = 20;
inline bool LogMessage::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMessage::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMessage::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMessage::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 LogMessage::pid() const {
  // @@protoc_insertion_point(field_get:machinetalk.LogMessage.pid)
  return pid_;
}
inline void LogMessage::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.LogMessage.pid)
}

// required .machinetalk.MsgLevel level = 30;
inline bool LogMessage::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMessage::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::machinetalk::MsgLevel LogMessage::level() const {
  // @@protoc_insertion_point(field_get:machinetalk.LogMessage.level)
  return static_cast< ::machinetalk::MsgLevel >(level_);
}
inline void LogMessage::set_level(::machinetalk::MsgLevel value) {
  assert(::machinetalk::MsgLevel_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.LogMessage.level)
}

// required string tag = 40;
inline bool LogMessage::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMessage::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMessage::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMessage::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& LogMessage::tag() const {
  // @@protoc_insertion_point(field_get:machinetalk.LogMessage.tag)
  return tag_.GetNoArena();
}
inline void LogMessage::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.LogMessage.tag)
}
#if LANG_CXX11
inline void LogMessage::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.LogMessage.tag)
}
#endif
inline void LogMessage::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.LogMessage.tag)
}
inline void LogMessage::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.LogMessage.tag)
}
inline ::std::string* LogMessage::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:machinetalk.LogMessage.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMessage::release_tag() {
  // @@protoc_insertion_point(field_release:machinetalk.LogMessage.tag)
  if (!has_tag()) {
    return NULL;
  }
  clear_has_tag();
  return tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.LogMessage.tag)
}

// required string text = 50;
inline bool LogMessage::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMessage::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& LogMessage::text() const {
  // @@protoc_insertion_point(field_get:machinetalk.LogMessage.text)
  return text_.GetNoArena();
}
inline void LogMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.LogMessage.text)
}
#if LANG_CXX11
inline void LogMessage::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.LogMessage.text)
}
#endif
inline void LogMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.LogMessage.text)
}
inline void LogMessage::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.LogMessage.text)
}
inline ::std::string* LogMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:machinetalk.LogMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogMessage::release_text() {
  // @@protoc_insertion_point(field_release:machinetalk.LogMessage.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.LogMessage.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2flog_2eproto
