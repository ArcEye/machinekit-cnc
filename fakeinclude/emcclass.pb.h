// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/emcclass.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2femcclass_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2femcclass_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2femcclass_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2femcclass_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2femcclass_2eproto
namespace machinetalk {
class EmcPose;
class EmcPoseDefaultTypeInternal;
extern EmcPoseDefaultTypeInternal _EmcPose_default_instance_;
class PmCartesian;
class PmCartesianDefaultTypeInternal;
extern PmCartesianDefaultTypeInternal _PmCartesian_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::EmcPose* Arena::CreateMaybeMessage<::machinetalk::EmcPose>(Arena*);
template<> ::machinetalk::PmCartesian* Arena::CreateMaybeMessage<::machinetalk::PmCartesian>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class PmCartesian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.PmCartesian) */ {
 public:
  PmCartesian();
  virtual ~PmCartesian();

  PmCartesian(const PmCartesian& from);

  inline PmCartesian& operator=(const PmCartesian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PmCartesian(PmCartesian&& from) noexcept
    : PmCartesian() {
    *this = ::std::move(from);
  }

  inline PmCartesian& operator=(PmCartesian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PmCartesian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PmCartesian* internal_default_instance() {
    return reinterpret_cast<const PmCartesian*>(
               &_PmCartesian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PmCartesian* other);
  friend void swap(PmCartesian& a, PmCartesian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PmCartesian* New() const final {
    return CreateMaybeMessage<PmCartesian>(NULL);
  }

  PmCartesian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PmCartesian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PmCartesian& from);
  void MergeFrom(const PmCartesian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmCartesian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 10;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 10;
  double x() const;
  void set_x(double value);

  // optional double y = 20;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 20;
  double y() const;
  void set_y(double value);

  // optional double z = 30;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 30;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:machinetalk.PmCartesian)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2femcclass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmcPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.EmcPose) */ {
 public:
  EmcPose();
  virtual ~EmcPose();

  EmcPose(const EmcPose& from);

  inline EmcPose& operator=(const EmcPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmcPose(EmcPose&& from) noexcept
    : EmcPose() {
    *this = ::std::move(from);
  }

  inline EmcPose& operator=(EmcPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmcPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmcPose* internal_default_instance() {
    return reinterpret_cast<const EmcPose*>(
               &_EmcPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EmcPose* other);
  friend void swap(EmcPose& a, EmcPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmcPose* New() const final {
    return CreateMaybeMessage<EmcPose>(NULL);
  }

  EmcPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmcPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmcPose& from);
  void MergeFrom(const EmcPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmcPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machinetalk.PmCartesian tran = 10;
  bool has_tran() const;
  void clear_tran();
  static const int kTranFieldNumber = 10;
  private:
  const ::machinetalk::PmCartesian& _internal_tran() const;
  public:
  const ::machinetalk::PmCartesian& tran() const;
  ::machinetalk::PmCartesian* release_tran();
  ::machinetalk::PmCartesian* mutable_tran();
  void set_allocated_tran(::machinetalk::PmCartesian* tran);

  // optional double a = 20;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 20;
  double a() const;
  void set_a(double value);

  // optional double b = 30;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 30;
  double b() const;
  void set_b(double value);

  // optional double c = 40;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 40;
  double c() const;
  void set_c(double value);

  // optional double u = 50;
  bool has_u() const;
  void clear_u();
  static const int kUFieldNumber = 50;
  double u() const;
  void set_u(double value);

  // optional double v = 60;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 60;
  double v() const;
  void set_v(double value);

  // optional double w = 70;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 70;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:machinetalk.EmcPose)
 private:
  void set_has_tran();
  void clear_has_tran();
  void set_has_a();
  void clear_has_a();
  void set_has_b();
  void clear_has_b();
  void set_has_c();
  void clear_has_c();
  void set_has_u();
  void clear_has_u();
  void set_has_v();
  void clear_has_v();
  void set_has_w();
  void clear_has_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::machinetalk::PmCartesian* tran_;
  double a_;
  double b_;
  double c_;
  double u_;
  double v_;
  double w_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2femcclass_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PmCartesian

// optional double x = 10;
inline bool PmCartesian::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PmCartesian::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PmCartesian::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PmCartesian::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double PmCartesian::x() const {
  // @@protoc_insertion_point(field_get:machinetalk.PmCartesian.x)
  return x_;
}
inline void PmCartesian::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.PmCartesian.x)
}

// optional double y = 20;
inline bool PmCartesian::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PmCartesian::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PmCartesian::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PmCartesian::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double PmCartesian::y() const {
  // @@protoc_insertion_point(field_get:machinetalk.PmCartesian.y)
  return y_;
}
inline void PmCartesian::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.PmCartesian.y)
}

// optional double z = 30;
inline bool PmCartesian::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PmCartesian::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PmCartesian::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PmCartesian::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double PmCartesian::z() const {
  // @@protoc_insertion_point(field_get:machinetalk.PmCartesian.z)
  return z_;
}
inline void PmCartesian::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.PmCartesian.z)
}

// -------------------------------------------------------------------

// EmcPose

// required .machinetalk.PmCartesian tran = 10;
inline bool EmcPose::has_tran() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmcPose::set_has_tran() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmcPose::clear_has_tran() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmcPose::clear_tran() {
  if (tran_ != NULL) tran_->Clear();
  clear_has_tran();
}
inline const ::machinetalk::PmCartesian& EmcPose::_internal_tran() const {
  return *tran_;
}
inline const ::machinetalk::PmCartesian& EmcPose::tran() const {
  const ::machinetalk::PmCartesian* p = tran_;
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.tran)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::PmCartesian*>(
      &::machinetalk::_PmCartesian_default_instance_);
}
inline ::machinetalk::PmCartesian* EmcPose::release_tran() {
  // @@protoc_insertion_point(field_release:machinetalk.EmcPose.tran)
  clear_has_tran();
  ::machinetalk::PmCartesian* temp = tran_;
  tran_ = NULL;
  return temp;
}
inline ::machinetalk::PmCartesian* EmcPose::mutable_tran() {
  set_has_tran();
  if (tran_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::PmCartesian>(GetArenaNoVirtual());
    tran_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.EmcPose.tran)
  return tran_;
}
inline void EmcPose::set_allocated_tran(::machinetalk::PmCartesian* tran) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tran_;
  }
  if (tran) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tran = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tran, submessage_arena);
    }
    set_has_tran();
  } else {
    clear_has_tran();
  }
  tran_ = tran;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.EmcPose.tran)
}

// optional double a = 20;
inline bool EmcPose::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmcPose::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmcPose::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmcPose::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double EmcPose::a() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.a)
  return a_;
}
inline void EmcPose::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.a)
}

// optional double b = 30;
inline bool EmcPose::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmcPose::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmcPose::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmcPose::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double EmcPose::b() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.b)
  return b_;
}
inline void EmcPose::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.b)
}

// optional double c = 40;
inline bool EmcPose::has_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmcPose::set_has_c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmcPose::clear_has_c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmcPose::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline double EmcPose::c() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.c)
  return c_;
}
inline void EmcPose::set_c(double value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.c)
}

// optional double u = 50;
inline bool EmcPose::has_u() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmcPose::set_has_u() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmcPose::clear_has_u() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmcPose::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline double EmcPose::u() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.u)
  return u_;
}
inline void EmcPose::set_u(double value) {
  set_has_u();
  u_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.u)
}

// optional double v = 60;
inline bool EmcPose::has_v() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmcPose::set_has_v() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmcPose::clear_has_v() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmcPose::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double EmcPose::v() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.v)
  return v_;
}
inline void EmcPose::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.v)
}

// optional double w = 70;
inline bool EmcPose::has_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EmcPose::set_has_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EmcPose::clear_has_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EmcPose::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double EmcPose::w() const {
  // @@protoc_insertion_point(field_get:machinetalk.EmcPose.w)
  return w_;
}
inline void EmcPose::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.EmcPose.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2femcclass_2eproto
