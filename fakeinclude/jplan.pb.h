// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/jplan.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fjplan_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fjplan_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2fjplan_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2fjplan_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2fjplan_2eproto
namespace machinetalk {
class JplanCommand;
class JplanCommandDefaultTypeInternal;
extern JplanCommandDefaultTypeInternal _JplanCommand_default_instance_;
class JplanJoint;
class JplanJointDefaultTypeInternal;
extern JplanJointDefaultTypeInternal _JplanJoint_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::JplanCommand* Arena::CreateMaybeMessage<::machinetalk::JplanCommand>(Arena*);
template<> ::machinetalk::JplanJoint* Arena::CreateMaybeMessage<::machinetalk::JplanJoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class JplanJoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.JplanJoint) */ {
 public:
  JplanJoint();
  virtual ~JplanJoint();

  JplanJoint(const JplanJoint& from);

  inline JplanJoint& operator=(const JplanJoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JplanJoint(JplanJoint&& from) noexcept
    : JplanJoint() {
    *this = ::std::move(from);
  }

  inline JplanJoint& operator=(JplanJoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JplanJoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JplanJoint* internal_default_instance() {
    return reinterpret_cast<const JplanJoint*>(
               &_JplanJoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JplanJoint* other);
  friend void swap(JplanJoint& a, JplanJoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JplanJoint* New() const final {
    return CreateMaybeMessage<JplanJoint>(NULL);
  }

  JplanJoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JplanJoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JplanJoint& from);
  void MergeFrom(const JplanJoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JplanJoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double pos_cmd = 1;
  bool has_pos_cmd() const;
  void clear_pos_cmd();
  static const int kPosCmdFieldNumber = 1;
  double pos_cmd() const;
  void set_pos_cmd(double value);

  // optional double max_vel = 2;
  bool has_max_vel() const;
  void clear_max_vel();
  static const int kMaxVelFieldNumber = 2;
  double max_vel() const;
  void set_max_vel(double value);

  // optional double max_acc = 3;
  bool has_max_acc() const;
  void clear_max_acc();
  static const int kMaxAccFieldNumber = 3;
  double max_acc() const;
  void set_max_acc(double value);

  // optional bool enable = 4;
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 4;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:machinetalk.JplanJoint)
 private:
  void set_has_pos_cmd();
  void clear_has_pos_cmd();
  void set_has_max_vel();
  void clear_has_max_vel();
  void set_has_max_acc();
  void clear_has_max_acc();
  void set_has_enable();
  void clear_has_enable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double pos_cmd_;
  double max_vel_;
  double max_acc_;
  bool enable_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fjplan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JplanCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.JplanCommand) */ {
 public:
  JplanCommand();
  virtual ~JplanCommand();

  JplanCommand(const JplanCommand& from);

  inline JplanCommand& operator=(const JplanCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JplanCommand(JplanCommand&& from) noexcept
    : JplanCommand() {
    *this = ::std::move(from);
  }

  inline JplanCommand& operator=(JplanCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JplanCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JplanCommand* internal_default_instance() {
    return reinterpret_cast<const JplanCommand*>(
               &_JplanCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JplanCommand* other);
  friend void swap(JplanCommand& a, JplanCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JplanCommand* New() const final {
    return CreateMaybeMessage<JplanCommand>(NULL);
  }

  JplanCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JplanCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JplanCommand& from);
  void MergeFrom(const JplanCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JplanCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .machinetalk.JplanJoint joint = 2 [(.nanopb) = {
  int joint_size() const;
  void clear_joint();
  static const int kJointFieldNumber = 2;
  ::machinetalk::JplanJoint* mutable_joint(int index);
  ::google::protobuf::RepeatedPtrField< ::machinetalk::JplanJoint >*
      mutable_joint();
  const ::machinetalk::JplanJoint& joint(int index) const;
  ::machinetalk::JplanJoint* add_joint();
  const ::google::protobuf::RepeatedPtrField< ::machinetalk::JplanJoint >&
      joint() const;

  // @@protoc_insertion_point(class_scope:machinetalk.JplanCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::machinetalk::JplanJoint > joint_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fjplan_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JplanJoint

// optional double pos_cmd = 1;
inline bool JplanJoint::has_pos_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JplanJoint::set_has_pos_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JplanJoint::clear_has_pos_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JplanJoint::clear_pos_cmd() {
  pos_cmd_ = 0;
  clear_has_pos_cmd();
}
inline double JplanJoint::pos_cmd() const {
  // @@protoc_insertion_point(field_get:machinetalk.JplanJoint.pos_cmd)
  return pos_cmd_;
}
inline void JplanJoint::set_pos_cmd(double value) {
  set_has_pos_cmd();
  pos_cmd_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JplanJoint.pos_cmd)
}

// optional double max_vel = 2;
inline bool JplanJoint::has_max_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JplanJoint::set_has_max_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JplanJoint::clear_has_max_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JplanJoint::clear_max_vel() {
  max_vel_ = 0;
  clear_has_max_vel();
}
inline double JplanJoint::max_vel() const {
  // @@protoc_insertion_point(field_get:machinetalk.JplanJoint.max_vel)
  return max_vel_;
}
inline void JplanJoint::set_max_vel(double value) {
  set_has_max_vel();
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JplanJoint.max_vel)
}

// optional double max_acc = 3;
inline bool JplanJoint::has_max_acc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JplanJoint::set_has_max_acc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JplanJoint::clear_has_max_acc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JplanJoint::clear_max_acc() {
  max_acc_ = 0;
  clear_has_max_acc();
}
inline double JplanJoint::max_acc() const {
  // @@protoc_insertion_point(field_get:machinetalk.JplanJoint.max_acc)
  return max_acc_;
}
inline void JplanJoint::set_max_acc(double value) {
  set_has_max_acc();
  max_acc_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JplanJoint.max_acc)
}

// optional bool enable = 4;
inline bool JplanJoint::has_enable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JplanJoint::set_has_enable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JplanJoint::clear_has_enable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JplanJoint::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool JplanJoint::enable() const {
  // @@protoc_insertion_point(field_get:machinetalk.JplanJoint.enable)
  return enable_;
}
inline void JplanJoint::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JplanJoint.enable)
}

// -------------------------------------------------------------------

// JplanCommand

// repeated .machinetalk.JplanJoint joint = 2 [(.nanopb) = {
inline int JplanCommand::joint_size() const {
  return joint_.size();
}
inline void JplanCommand::clear_joint() {
  joint_.Clear();
}
inline ::machinetalk::JplanJoint* JplanCommand::mutable_joint(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.JplanCommand.joint)
  return joint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::machinetalk::JplanJoint >*
JplanCommand::mutable_joint() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JplanCommand.joint)
  return &joint_;
}
inline const ::machinetalk::JplanJoint& JplanCommand::joint(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JplanCommand.joint)
  return joint_.Get(index);
}
inline ::machinetalk::JplanJoint* JplanCommand::add_joint() {
  // @@protoc_insertion_point(field_add:machinetalk.JplanCommand.joint)
  return joint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::JplanJoint >&
JplanCommand::joint() const {
  // @@protoc_insertion_point(field_list:machinetalk.JplanCommand.joint)
  return joint_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fjplan_2eproto
