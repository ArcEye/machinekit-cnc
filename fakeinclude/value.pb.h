// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/value.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fvalue_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fvalue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
#include "machinetalk/protobuf/emcclass.pb.h"
#include "machinetalk/protobuf/types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2fvalue_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2fvalue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2fvalue_2eproto
namespace machinetalk {
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::Value* Arena::CreateMaybeMessage<::machinetalk::Value>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes v_bytes = 120;
  bool has_v_bytes() const;
  void clear_v_bytes();
  static const int kVBytesFieldNumber = 120;
  const ::std::string& v_bytes() const;
  void set_v_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_v_bytes(::std::string&& value);
  #endif
  void set_v_bytes(const char* value);
  void set_v_bytes(const void* value, size_t size);
  ::std::string* mutable_v_bytes();
  ::std::string* release_v_bytes();
  void set_allocated_v_bytes(::std::string* v_bytes);

  // optional string v_string = 180 [(.nanopb) = {
  bool has_v_string() const;
  void clear_v_string();
  static const int kVStringFieldNumber = 180;
  const ::std::string& v_string() const;
  void set_v_string(const ::std::string& value);
  #if LANG_CXX11
  void set_v_string(::std::string&& value);
  #endif
  void set_v_string(const char* value);
  void set_v_string(const char* value, size_t size);
  ::std::string* mutable_v_string();
  ::std::string* release_v_string();
  void set_allocated_v_string(::std::string* v_string);

  // optional .machinetalk.PmCartesian carte = 200;
  bool has_carte() const;
  void clear_carte();
  static const int kCarteFieldNumber = 200;
  private:
  const ::machinetalk::PmCartesian& _internal_carte() const;
  public:
  const ::machinetalk::PmCartesian& carte() const;
  ::machinetalk::PmCartesian* release_carte();
  ::machinetalk::PmCartesian* mutable_carte();
  void set_allocated_carte(::machinetalk::PmCartesian* carte);

  // optional .machinetalk.EmcPose pose = 220;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 220;
  private:
  const ::machinetalk::EmcPose& _internal_pose() const;
  public:
  const ::machinetalk::EmcPose& pose() const;
  ::machinetalk::EmcPose* release_pose();
  ::machinetalk::EmcPose* mutable_pose();
  void set_allocated_pose(::machinetalk::EmcPose* pose);

  // optional fixed32 v_uint32 = 150;
  bool has_v_uint32() const;
  void clear_v_uint32();
  static const int kVUint32FieldNumber = 150;
  ::google::protobuf::uint32 v_uint32() const;
  void set_v_uint32(::google::protobuf::uint32 value);

  // optional double halfloat = 101;
  bool has_halfloat() const;
  void clear_halfloat();
  static const int kHalfloatFieldNumber = 101;
  double halfloat() const;
  void set_halfloat(double value);

  // optional sfixed32 hals32 = 102;
  bool has_hals32() const;
  void clear_hals32();
  static const int kHals32FieldNumber = 102;
  ::google::protobuf::int32 hals32() const;
  void set_hals32(::google::protobuf::int32 value);

  // optional fixed32 halu32 = 103;
  bool has_halu32() const;
  void clear_halu32();
  static const int kHalu32FieldNumber = 103;
  ::google::protobuf::uint32 halu32() const;
  void set_halu32(::google::protobuf::uint32 value);

  // optional sfixed64 v_int64 = 140;
  bool has_v_int64() const;
  void clear_v_int64();
  static const int kVInt64FieldNumber = 140;
  ::google::protobuf::int64 v_int64() const;
  void set_v_int64(::google::protobuf::int64 value);

  // optional sfixed32 v_int32 = 130;
  bool has_v_int32() const;
  void clear_v_int32();
  static const int kVInt32FieldNumber = 130;
  ::google::protobuf::int32 v_int32() const;
  void set_v_int32(::google::protobuf::int32 value);

  // optional bool halbit = 100;
  bool has_halbit() const;
  void clear_halbit();
  static const int kHalbitFieldNumber = 100;
  bool halbit() const;
  void set_halbit(bool value);

  // optional bool v_bool = 190;
  bool has_v_bool() const;
  void clear_v_bool();
  static const int kVBoolFieldNumber = 190;
  bool v_bool() const;
  void set_v_bool(bool value);

  // optional fixed64 v_uint64 = 160;
  bool has_v_uint64() const;
  void clear_v_uint64();
  static const int kVUint64FieldNumber = 160;
  ::google::protobuf::uint64 v_uint64() const;
  void set_v_uint64(::google::protobuf::uint64 value);

  // optional double v_double = 170;
  bool has_v_double() const;
  void clear_v_double();
  static const int kVDoubleFieldNumber = 170;
  double v_double() const;
  void set_v_double(double value);

  // required .machinetalk.ValueType type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::machinetalk::ValueType type() const;
  void set_type(::machinetalk::ValueType value);

  // @@protoc_insertion_point(class_scope:machinetalk.Value)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_halbit();
  void clear_has_halbit();
  void set_has_halfloat();
  void clear_has_halfloat();
  void set_has_hals32();
  void clear_has_hals32();
  void set_has_halu32();
  void clear_has_halu32();
  void set_has_v_bytes();
  void clear_has_v_bytes();
  void set_has_v_int32();
  void clear_has_v_int32();
  void set_has_v_int64();
  void clear_has_v_int64();
  void set_has_v_uint32();
  void clear_has_v_uint32();
  void set_has_v_uint64();
  void clear_has_v_uint64();
  void set_has_v_double();
  void clear_has_v_double();
  void set_has_v_string();
  void clear_has_v_string();
  void set_has_v_bool();
  void clear_has_v_bool();
  void set_has_carte();
  void clear_has_carte();
  void set_has_pose();
  void clear_has_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr v_bytes_;
  ::google::protobuf::internal::ArenaStringPtr v_string_;
  ::machinetalk::PmCartesian* carte_;
  ::machinetalk::EmcPose* pose_;
  ::google::protobuf::uint32 v_uint32_;
  double halfloat_;
  ::google::protobuf::int32 hals32_;
  ::google::protobuf::uint32 halu32_;
  ::google::protobuf::int64 v_int64_;
  ::google::protobuf::int32 v_int32_;
  bool halbit_;
  bool v_bool_;
  ::google::protobuf::uint64 v_uint64_;
  double v_double_;
  int type_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fvalue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// required .machinetalk.ValueType type = 10;
inline bool Value::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Value::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Value::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Value::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::machinetalk::ValueType Value::type() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.type)
  return static_cast< ::machinetalk::ValueType >(type_);
}
inline void Value::set_type(::machinetalk::ValueType value) {
  assert(::machinetalk::ValueType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.type)
}

// optional bool halbit = 100;
inline bool Value::has_halbit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Value::set_has_halbit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Value::clear_has_halbit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Value::clear_halbit() {
  halbit_ = false;
  clear_has_halbit();
}
inline bool Value::halbit() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.halbit)
  return halbit_;
}
inline void Value::set_halbit(bool value) {
  set_has_halbit();
  halbit_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.halbit)
}

// optional double halfloat = 101;
inline bool Value::has_halfloat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Value::set_has_halfloat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Value::clear_has_halfloat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Value::clear_halfloat() {
  halfloat_ = 0;
  clear_has_halfloat();
}
inline double Value::halfloat() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.halfloat)
  return halfloat_;
}
inline void Value::set_halfloat(double value) {
  set_has_halfloat();
  halfloat_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.halfloat)
}

// optional sfixed32 hals32 = 102;
inline bool Value::has_hals32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Value::set_has_hals32() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Value::clear_has_hals32() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Value::clear_hals32() {
  hals32_ = 0;
  clear_has_hals32();
}
inline ::google::protobuf::int32 Value::hals32() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.hals32)
  return hals32_;
}
inline void Value::set_hals32(::google::protobuf::int32 value) {
  set_has_hals32();
  hals32_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.hals32)
}

// optional fixed32 halu32 = 103;
inline bool Value::has_halu32() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Value::set_has_halu32() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Value::clear_has_halu32() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Value::clear_halu32() {
  halu32_ = 0u;
  clear_has_halu32();
}
inline ::google::protobuf::uint32 Value::halu32() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.halu32)
  return halu32_;
}
inline void Value::set_halu32(::google::protobuf::uint32 value) {
  set_has_halu32();
  halu32_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.halu32)
}

// optional bytes v_bytes = 120;
inline bool Value::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_v_bytes() {
  v_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes();
}
inline const ::std::string& Value::v_bytes() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_bytes)
  return v_bytes_.GetNoArena();
}
inline void Value::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_bytes)
}
#if LANG_CXX11
inline void Value::set_v_bytes(::std::string&& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.Value.v_bytes)
}
#endif
inline void Value::set_v_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Value.v_bytes)
}
inline void Value::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Value.v_bytes)
}
inline ::std::string* Value::mutable_v_bytes() {
  set_has_v_bytes();
  // @@protoc_insertion_point(field_mutable:machinetalk.Value.v_bytes)
  return v_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_v_bytes() {
  // @@protoc_insertion_point(field_release:machinetalk.Value.v_bytes)
  if (!has_v_bytes()) {
    return NULL;
  }
  clear_has_v_bytes();
  return v_bytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_v_bytes(::std::string* v_bytes) {
  if (v_bytes != NULL) {
    set_has_v_bytes();
  } else {
    clear_has_v_bytes();
  }
  v_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Value.v_bytes)
}

// optional sfixed32 v_int32 = 130;
inline bool Value::has_v_int32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Value::set_has_v_int32() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Value::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Value::clear_v_int32() {
  v_int32_ = 0;
  clear_has_v_int32();
}
inline ::google::protobuf::int32 Value::v_int32() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_int32)
  return v_int32_;
}
inline void Value::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_int32)
}

// optional sfixed64 v_int64 = 140;
inline bool Value::has_v_int64() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Value::set_has_v_int64() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Value::clear_has_v_int64() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Value::clear_v_int64() {
  v_int64_ = GOOGLE_LONGLONG(0);
  clear_has_v_int64();
}
inline ::google::protobuf::int64 Value::v_int64() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_int64)
  return v_int64_;
}
inline void Value::set_v_int64(::google::protobuf::int64 value) {
  set_has_v_int64();
  v_int64_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_int64)
}

// optional fixed32 v_uint32 = 150;
inline bool Value::has_v_uint32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Value::set_has_v_uint32() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Value::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Value::clear_v_uint32() {
  v_uint32_ = 0u;
  clear_has_v_uint32();
}
inline ::google::protobuf::uint32 Value::v_uint32() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_uint32)
  return v_uint32_;
}
inline void Value::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_uint32)
}

// optional fixed64 v_uint64 = 160;
inline bool Value::has_v_uint64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Value::set_has_v_uint64() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Value::clear_has_v_uint64() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Value::clear_v_uint64() {
  v_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_v_uint64();
}
inline ::google::protobuf::uint64 Value::v_uint64() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_uint64)
  return v_uint64_;
}
inline void Value::set_v_uint64(::google::protobuf::uint64 value) {
  set_has_v_uint64();
  v_uint64_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_uint64)
}

// optional double v_double = 170;
inline bool Value::has_v_double() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Value::set_has_v_double() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Value::clear_has_v_double() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Value::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
inline double Value::v_double() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_double)
  return v_double_;
}
inline void Value::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_double)
}

// optional string v_string = 180 [(.nanopb) = {
inline bool Value::has_v_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_v_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_v_string() {
  v_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_string();
}
inline const ::std::string& Value::v_string() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_string)
  return v_string_.GetNoArena();
}
inline void Value::set_v_string(const ::std::string& value) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_string)
}
#if LANG_CXX11
inline void Value::set_v_string(::std::string&& value) {
  set_has_v_string();
  v_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.Value.v_string)
}
#endif
inline void Value::set_v_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Value.v_string)
}
inline void Value::set_v_string(const char* value, size_t size) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Value.v_string)
}
inline ::std::string* Value::mutable_v_string() {
  set_has_v_string();
  // @@protoc_insertion_point(field_mutable:machinetalk.Value.v_string)
  return v_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_v_string() {
  // @@protoc_insertion_point(field_release:machinetalk.Value.v_string)
  if (!has_v_string()) {
    return NULL;
  }
  clear_has_v_string();
  return v_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_v_string(::std::string* v_string) {
  if (v_string != NULL) {
    set_has_v_string();
  } else {
    clear_has_v_string();
  }
  v_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_string);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Value.v_string)
}

// optional bool v_bool = 190;
inline bool Value::has_v_bool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Value::set_has_v_bool() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Value::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Value::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
inline bool Value::v_bool() const {
  // @@protoc_insertion_point(field_get:machinetalk.Value.v_bool)
  return v_bool_;
}
inline void Value::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Value.v_bool)
}

// optional .machinetalk.PmCartesian carte = 200;
inline bool Value::has_carte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_carte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_carte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::machinetalk::PmCartesian& Value::_internal_carte() const {
  return *carte_;
}
inline const ::machinetalk::PmCartesian& Value::carte() const {
  const ::machinetalk::PmCartesian* p = carte_;
  // @@protoc_insertion_point(field_get:machinetalk.Value.carte)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::PmCartesian*>(
      &::machinetalk::_PmCartesian_default_instance_);
}
inline ::machinetalk::PmCartesian* Value::release_carte() {
  // @@protoc_insertion_point(field_release:machinetalk.Value.carte)
  clear_has_carte();
  ::machinetalk::PmCartesian* temp = carte_;
  carte_ = NULL;
  return temp;
}
inline ::machinetalk::PmCartesian* Value::mutable_carte() {
  set_has_carte();
  if (carte_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::PmCartesian>(GetArenaNoVirtual());
    carte_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Value.carte)
  return carte_;
}
inline void Value::set_allocated_carte(::machinetalk::PmCartesian* carte) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(carte_);
  }
  if (carte) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      carte = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, carte, submessage_arena);
    }
    set_has_carte();
  } else {
    clear_has_carte();
  }
  carte_ = carte;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Value.carte)
}

// optional .machinetalk.EmcPose pose = 220;
inline bool Value::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::machinetalk::EmcPose& Value::_internal_pose() const {
  return *pose_;
}
inline const ::machinetalk::EmcPose& Value::pose() const {
  const ::machinetalk::EmcPose* p = pose_;
  // @@protoc_insertion_point(field_get:machinetalk.Value.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::EmcPose*>(
      &::machinetalk::_EmcPose_default_instance_);
}
inline ::machinetalk::EmcPose* Value::release_pose() {
  // @@protoc_insertion_point(field_release:machinetalk.Value.pose)
  clear_has_pose();
  ::machinetalk::EmcPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::machinetalk::EmcPose* Value::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::EmcPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Value.pose)
  return pose_;
}
inline void Value::set_allocated_pose(::machinetalk::EmcPose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Value.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fvalue_2eproto
