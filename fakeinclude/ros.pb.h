// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/ros.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fros_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fros_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2fros_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2fros_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2fros_2eproto
namespace machinetalk {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class JointTrajectory;
class JointTrajectoryDefaultTypeInternal;
extern JointTrajectoryDefaultTypeInternal _JointTrajectory_default_instance_;
class JointTrajectoryPoint;
class JointTrajectoryPointDefaultTypeInternal;
extern JointTrajectoryPointDefaultTypeInternal _JointTrajectoryPoint_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::Header* Arena::CreateMaybeMessage<::machinetalk::Header>(Arena*);
template<> ::machinetalk::JointTrajectory* Arena::CreateMaybeMessage<::machinetalk::JointTrajectory>(Arena*);
template<> ::machinetalk::JointTrajectoryPoint* Arena::CreateMaybeMessage<::machinetalk::JointTrajectoryPoint>(Arena*);
template<> ::machinetalk::Time* Arena::CreateMaybeMessage<::machinetalk::Time>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 secs = 1;
  bool has_secs() const;
  void clear_secs();
  static const int kSecsFieldNumber = 1;
  ::google::protobuf::uint32 secs() const;
  void set_secs(::google::protobuf::uint32 value);

  // optional uint32 nsecs = 2;
  bool has_nsecs() const;
  void clear_nsecs();
  static const int kNsecsFieldNumber = 2;
  ::google::protobuf::uint32 nsecs() const;
  void set_nsecs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.Time)
 private:
  void set_has_secs();
  void clear_has_secs();
  void set_has_nsecs();
  void clear_has_nsecs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 secs_;
  ::google::protobuf::uint32 nsecs_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fros_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frame_id = 3 [(.nanopb) = {
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional .machinetalk.Time stamp = 2;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 2;
  private:
  const ::machinetalk::Time& _internal_stamp() const;
  public:
  const ::machinetalk::Time& stamp() const;
  ::machinetalk::Time* release_stamp();
  ::machinetalk::Time* mutable_stamp();
  void set_allocated_stamp(::machinetalk::Time* stamp);

  // optional uint32 seq = 1;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.Header)
 private:
  void set_has_seq();
  void clear_has_seq();
  void set_has_stamp();
  void clear_has_stamp();
  void set_has_frame_id();
  void clear_has_frame_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::machinetalk::Time* stamp_;
  ::google::protobuf::uint32 seq_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fros_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JointTrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.JointTrajectoryPoint) */ {
 public:
  JointTrajectoryPoint();
  virtual ~JointTrajectoryPoint();

  JointTrajectoryPoint(const JointTrajectoryPoint& from);

  inline JointTrajectoryPoint& operator=(const JointTrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointTrajectoryPoint(JointTrajectoryPoint&& from) noexcept
    : JointTrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline JointTrajectoryPoint& operator=(JointTrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointTrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointTrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const JointTrajectoryPoint*>(
               &_JointTrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(JointTrajectoryPoint* other);
  friend void swap(JointTrajectoryPoint& a, JointTrajectoryPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointTrajectoryPoint* New() const final {
    return CreateMaybeMessage<JointTrajectoryPoint>(NULL);
  }

  JointTrajectoryPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointTrajectoryPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointTrajectoryPoint& from);
  void MergeFrom(const JointTrajectoryPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double positions = 1 [(.nanopb) = {
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 1;
  double positions(int index) const;
  void set_positions(int index, double value);
  void add_positions(double value);
  const ::google::protobuf::RepeatedField< double >&
      positions() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_positions();

  // repeated double velocities = 2 [(.nanopb) = {
  int velocities_size() const;
  void clear_velocities();
  static const int kVelocitiesFieldNumber = 2;
  double velocities(int index) const;
  void set_velocities(int index, double value);
  void add_velocities(double value);
  const ::google::protobuf::RepeatedField< double >&
      velocities() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_velocities();

  // repeated double accelerations = 3 [(.nanopb) = {
  int accelerations_size() const;
  void clear_accelerations();
  static const int kAccelerationsFieldNumber = 3;
  double accelerations(int index) const;
  void set_accelerations(int index, double value);
  void add_accelerations(double value);
  const ::google::protobuf::RepeatedField< double >&
      accelerations() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_accelerations();

  // repeated double effort = 4 [(.nanopb) = {
  int effort_size() const;
  void clear_effort();
  static const int kEffortFieldNumber = 4;
  double effort(int index) const;
  void set_effort(int index, double value);
  void add_effort(double value);
  const ::google::protobuf::RepeatedField< double >&
      effort() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_effort();

  // optional double time_from_start = 5;
  bool has_time_from_start() const;
  void clear_time_from_start();
  static const int kTimeFromStartFieldNumber = 5;
  double time_from_start() const;
  void set_time_from_start(double value);

  // optional double duration = 7;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  double duration() const;
  void set_duration(double value);

  // optional uint32 serial = 8;
  bool has_serial() const;
  void clear_serial();
  static const int kSerialFieldNumber = 8;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.JointTrajectoryPoint)
 private:
  void set_has_time_from_start();
  void clear_has_time_from_start();
  void set_has_duration();
  void clear_has_duration();
  void set_has_serial();
  void clear_has_serial();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > positions_;
  ::google::protobuf::RepeatedField< double > velocities_;
  ::google::protobuf::RepeatedField< double > accelerations_;
  ::google::protobuf::RepeatedField< double > effort_;
  double time_from_start_;
  double duration_;
  ::google::protobuf::uint32 serial_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fros_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JointTrajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.JointTrajectory) */ {
 public:
  JointTrajectory();
  virtual ~JointTrajectory();

  JointTrajectory(const JointTrajectory& from);

  inline JointTrajectory& operator=(const JointTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointTrajectory(JointTrajectory&& from) noexcept
    : JointTrajectory() {
    *this = ::std::move(from);
  }

  inline JointTrajectory& operator=(JointTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointTrajectory* internal_default_instance() {
    return reinterpret_cast<const JointTrajectory*>(
               &_JointTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JointTrajectory* other);
  friend void swap(JointTrajectory& a, JointTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointTrajectory* New() const final {
    return CreateMaybeMessage<JointTrajectory>(NULL);
  }

  JointTrajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointTrajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointTrajectory& from);
  void MergeFrom(const JointTrajectory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string joint_names = 2;
  int joint_names_size() const;
  void clear_joint_names();
  static const int kJointNamesFieldNumber = 2;
  const ::std::string& joint_names(int index) const;
  ::std::string* mutable_joint_names(int index);
  void set_joint_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_joint_names(int index, ::std::string&& value);
  #endif
  void set_joint_names(int index, const char* value);
  void set_joint_names(int index, const char* value, size_t size);
  ::std::string* add_joint_names();
  void add_joint_names(const ::std::string& value);
  #if LANG_CXX11
  void add_joint_names(::std::string&& value);
  #endif
  void add_joint_names(const char* value);
  void add_joint_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& joint_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_joint_names();

  // repeated .machinetalk.JointTrajectoryPoint points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  ::machinetalk::JointTrajectoryPoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::machinetalk::JointTrajectoryPoint >*
      mutable_points();
  const ::machinetalk::JointTrajectoryPoint& points(int index) const;
  ::machinetalk::JointTrajectoryPoint* add_points();
  const ::google::protobuf::RepeatedPtrField< ::machinetalk::JointTrajectoryPoint >&
      points() const;

  // optional .machinetalk.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::machinetalk::Header& _internal_header() const;
  public:
  const ::machinetalk::Header& header() const;
  ::machinetalk::Header* release_header();
  ::machinetalk::Header* mutable_header();
  void set_allocated_header(::machinetalk::Header* header);

  // @@protoc_insertion_point(class_scope:machinetalk.JointTrajectory)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> joint_names_;
  ::google::protobuf::RepeatedPtrField< ::machinetalk::JointTrajectoryPoint > points_;
  ::machinetalk::Header* header_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2fros_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time

// optional uint32 secs = 1;
inline bool Time::has_secs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Time::set_has_secs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Time::clear_has_secs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Time::clear_secs() {
  secs_ = 0u;
  clear_has_secs();
}
inline ::google::protobuf::uint32 Time::secs() const {
  // @@protoc_insertion_point(field_get:machinetalk.Time.secs)
  return secs_;
}
inline void Time::set_secs(::google::protobuf::uint32 value) {
  set_has_secs();
  secs_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Time.secs)
}

// optional uint32 nsecs = 2;
inline bool Time::has_nsecs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Time::set_has_nsecs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Time::clear_has_nsecs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Time::clear_nsecs() {
  nsecs_ = 0u;
  clear_has_nsecs();
}
inline ::google::protobuf::uint32 Time::nsecs() const {
  // @@protoc_insertion_point(field_get:machinetalk.Time.nsecs)
  return nsecs_;
}
inline void Time::set_nsecs(::google::protobuf::uint32 value) {
  set_has_nsecs();
  nsecs_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Time.nsecs)
}

// -------------------------------------------------------------------

// Header

// optional uint32 seq = 1;
inline bool Header::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 Header::seq() const {
  // @@protoc_insertion_point(field_get:machinetalk.Header.seq)
  return seq_;
}
inline void Header::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Header.seq)
}

// optional .machinetalk.Time stamp = 2;
inline bool Header::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_stamp() {
  if (stamp_ != NULL) stamp_->Clear();
  clear_has_stamp();
}
inline const ::machinetalk::Time& Header::_internal_stamp() const {
  return *stamp_;
}
inline const ::machinetalk::Time& Header::stamp() const {
  const ::machinetalk::Time* p = stamp_;
  // @@protoc_insertion_point(field_get:machinetalk.Header.stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::Time*>(
      &::machinetalk::_Time_default_instance_);
}
inline ::machinetalk::Time* Header::release_stamp() {
  // @@protoc_insertion_point(field_release:machinetalk.Header.stamp)
  clear_has_stamp();
  ::machinetalk::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline ::machinetalk::Time* Header::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Header.stamp)
  return stamp_;
}
inline void Header::set_allocated_stamp(::machinetalk::Time* stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stamp_;
  }
  if (stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Header.stamp)
}

// optional string frame_id = 3 [(.nanopb) = {
inline bool Header::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:machinetalk.Header.frame_id)
  return frame_id_.GetNoArena();
}
inline void Header::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.Header.frame_id)
}
#if LANG_CXX11
inline void Header::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.Header.frame_id)
}
#endif
inline void Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.Header.frame_id)
}
inline void Header::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Header.frame_id)
}
inline ::std::string* Header::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:machinetalk.Header.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:machinetalk.Header.frame_id)
  if (!has_frame_id()) {
    return NULL;
  }
  clear_has_frame_id();
  return frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Header.frame_id)
}

// -------------------------------------------------------------------

// JointTrajectoryPoint

// repeated double positions = 1 [(.nanopb) = {
inline int JointTrajectoryPoint::positions_size() const {
  return positions_.size();
}
inline void JointTrajectoryPoint::clear_positions() {
  positions_.Clear();
}
inline double JointTrajectoryPoint::positions(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.positions)
  return positions_.Get(index);
}
inline void JointTrajectoryPoint::set_positions(int index, double value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.positions)
}
inline void JointTrajectoryPoint::add_positions(double value) {
  positions_.Add(value);
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectoryPoint.positions)
}
inline const ::google::protobuf::RepeatedField< double >&
JointTrajectoryPoint::positions() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectoryPoint.positions)
  return positions_;
}
inline ::google::protobuf::RepeatedField< double >*
JointTrajectoryPoint::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectoryPoint.positions)
  return &positions_;
}

// repeated double velocities = 2 [(.nanopb) = {
inline int JointTrajectoryPoint::velocities_size() const {
  return velocities_.size();
}
inline void JointTrajectoryPoint::clear_velocities() {
  velocities_.Clear();
}
inline double JointTrajectoryPoint::velocities(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.velocities)
  return velocities_.Get(index);
}
inline void JointTrajectoryPoint::set_velocities(int index, double value) {
  velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.velocities)
}
inline void JointTrajectoryPoint::add_velocities(double value) {
  velocities_.Add(value);
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectoryPoint.velocities)
}
inline const ::google::protobuf::RepeatedField< double >&
JointTrajectoryPoint::velocities() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectoryPoint.velocities)
  return velocities_;
}
inline ::google::protobuf::RepeatedField< double >*
JointTrajectoryPoint::mutable_velocities() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectoryPoint.velocities)
  return &velocities_;
}

// repeated double accelerations = 3 [(.nanopb) = {
inline int JointTrajectoryPoint::accelerations_size() const {
  return accelerations_.size();
}
inline void JointTrajectoryPoint::clear_accelerations() {
  accelerations_.Clear();
}
inline double JointTrajectoryPoint::accelerations(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.accelerations)
  return accelerations_.Get(index);
}
inline void JointTrajectoryPoint::set_accelerations(int index, double value) {
  accelerations_.Set(index, value);
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.accelerations)
}
inline void JointTrajectoryPoint::add_accelerations(double value) {
  accelerations_.Add(value);
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectoryPoint.accelerations)
}
inline const ::google::protobuf::RepeatedField< double >&
JointTrajectoryPoint::accelerations() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectoryPoint.accelerations)
  return accelerations_;
}
inline ::google::protobuf::RepeatedField< double >*
JointTrajectoryPoint::mutable_accelerations() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectoryPoint.accelerations)
  return &accelerations_;
}

// repeated double effort = 4 [(.nanopb) = {
inline int JointTrajectoryPoint::effort_size() const {
  return effort_.size();
}
inline void JointTrajectoryPoint::clear_effort() {
  effort_.Clear();
}
inline double JointTrajectoryPoint::effort(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.effort)
  return effort_.Get(index);
}
inline void JointTrajectoryPoint::set_effort(int index, double value) {
  effort_.Set(index, value);
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.effort)
}
inline void JointTrajectoryPoint::add_effort(double value) {
  effort_.Add(value);
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectoryPoint.effort)
}
inline const ::google::protobuf::RepeatedField< double >&
JointTrajectoryPoint::effort() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectoryPoint.effort)
  return effort_;
}
inline ::google::protobuf::RepeatedField< double >*
JointTrajectoryPoint::mutable_effort() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectoryPoint.effort)
  return &effort_;
}

// optional double time_from_start = 5;
inline bool JointTrajectoryPoint::has_time_from_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointTrajectoryPoint::set_has_time_from_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointTrajectoryPoint::clear_has_time_from_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointTrajectoryPoint::clear_time_from_start() {
  time_from_start_ = 0;
  clear_has_time_from_start();
}
inline double JointTrajectoryPoint::time_from_start() const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.time_from_start)
  return time_from_start_;
}
inline void JointTrajectoryPoint::set_time_from_start(double value) {
  set_has_time_from_start();
  time_from_start_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.time_from_start)
}

// optional double duration = 7;
inline bool JointTrajectoryPoint::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointTrajectoryPoint::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointTrajectoryPoint::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointTrajectoryPoint::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double JointTrajectoryPoint::duration() const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.duration)
  return duration_;
}
inline void JointTrajectoryPoint::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.duration)
}

// optional uint32 serial = 8;
inline bool JointTrajectoryPoint::has_serial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointTrajectoryPoint::set_has_serial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointTrajectoryPoint::clear_has_serial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointTrajectoryPoint::clear_serial() {
  serial_ = 0u;
  clear_has_serial();
}
inline ::google::protobuf::uint32 JointTrajectoryPoint::serial() const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectoryPoint.serial)
  return serial_;
}
inline void JointTrajectoryPoint::set_serial(::google::protobuf::uint32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectoryPoint.serial)
}

// -------------------------------------------------------------------

// JointTrajectory

// optional .machinetalk.Header header = 1;
inline bool JointTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointTrajectory::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::machinetalk::Header& JointTrajectory::_internal_header() const {
  return *header_;
}
inline const ::machinetalk::Header& JointTrajectory::header() const {
  const ::machinetalk::Header* p = header_;
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectory.header)
  return p != NULL ? *p : *reinterpret_cast<const ::machinetalk::Header*>(
      &::machinetalk::_Header_default_instance_);
}
inline ::machinetalk::Header* JointTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:machinetalk.JointTrajectory.header)
  clear_has_header();
  ::machinetalk::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::machinetalk::Header* JointTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::machinetalk::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.JointTrajectory.header)
  return header_;
}
inline void JointTrajectory::set_allocated_header(::machinetalk::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:machinetalk.JointTrajectory.header)
}

// repeated string joint_names = 2;
inline int JointTrajectory::joint_names_size() const {
  return joint_names_.size();
}
inline void JointTrajectory::clear_joint_names() {
  joint_names_.Clear();
}
inline const ::std::string& JointTrajectory::joint_names(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectory.joint_names)
  return joint_names_.Get(index);
}
inline ::std::string* JointTrajectory::mutable_joint_names(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.JointTrajectory.joint_names)
  return joint_names_.Mutable(index);
}
inline void JointTrajectory::set_joint_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectory.joint_names)
  joint_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JointTrajectory::set_joint_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:machinetalk.JointTrajectory.joint_names)
  joint_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JointTrajectory::set_joint_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joint_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.JointTrajectory.joint_names)
}
inline void JointTrajectory::set_joint_names(int index, const char* value, size_t size) {
  joint_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.JointTrajectory.joint_names)
}
inline ::std::string* JointTrajectory::add_joint_names() {
  // @@protoc_insertion_point(field_add_mutable:machinetalk.JointTrajectory.joint_names)
  return joint_names_.Add();
}
inline void JointTrajectory::add_joint_names(const ::std::string& value) {
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectory.joint_names)
}
#if LANG_CXX11
inline void JointTrajectory::add_joint_names(::std::string&& value) {
  joint_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectory.joint_names)
}
#endif
inline void JointTrajectory::add_joint_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:machinetalk.JointTrajectory.joint_names)
}
inline void JointTrajectory::add_joint_names(const char* value, size_t size) {
  joint_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:machinetalk.JointTrajectory.joint_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JointTrajectory::joint_names() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectory.joint_names)
  return joint_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JointTrajectory::mutable_joint_names() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectory.joint_names)
  return &joint_names_;
}

// repeated .machinetalk.JointTrajectoryPoint points = 3;
inline int JointTrajectory::points_size() const {
  return points_.size();
}
inline void JointTrajectory::clear_points() {
  points_.Clear();
}
inline ::machinetalk::JointTrajectoryPoint* JointTrajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.JointTrajectory.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::machinetalk::JointTrajectoryPoint >*
JointTrajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.JointTrajectory.points)
  return &points_;
}
inline const ::machinetalk::JointTrajectoryPoint& JointTrajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.JointTrajectory.points)
  return points_.Get(index);
}
inline ::machinetalk::JointTrajectoryPoint* JointTrajectory::add_points() {
  // @@protoc_insertion_point(field_add:machinetalk.JointTrajectory.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::JointTrajectoryPoint >&
JointTrajectory::points() const {
  // @@protoc_insertion_point(field_list:machinetalk.JointTrajectory.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2fros_2eproto
