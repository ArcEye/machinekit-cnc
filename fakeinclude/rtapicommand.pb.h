// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/rtapicommand.proto

#ifndef PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2frtapicommand_2eproto
#define PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2frtapicommand_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_machinetalk_2fprotobuf_2frtapicommand_2eproto 

namespace protobuf_machinetalk_2fprotobuf_2frtapicommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_machinetalk_2fprotobuf_2frtapicommand_2eproto
namespace machinetalk {
class RTAPICommand;
class RTAPICommandDefaultTypeInternal;
extern RTAPICommandDefaultTypeInternal _RTAPICommand_default_instance_;
}  // namespace machinetalk
namespace google {
namespace protobuf {
template<> ::machinetalk::RTAPICommand* Arena::CreateMaybeMessage<::machinetalk::RTAPICommand>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace machinetalk {

// ===================================================================

class RTAPICommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:machinetalk.RTAPICommand) */ {
 public:
  RTAPICommand();
  virtual ~RTAPICommand();

  RTAPICommand(const RTAPICommand& from);

  inline RTAPICommand& operator=(const RTAPICommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RTAPICommand(RTAPICommand&& from) noexcept
    : RTAPICommand() {
    *this = ::std::move(from);
  }

  inline RTAPICommand& operator=(RTAPICommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RTAPICommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTAPICommand* internal_default_instance() {
    return reinterpret_cast<const RTAPICommand*>(
               &_RTAPICommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RTAPICommand* other);
  friend void swap(RTAPICommand& a, RTAPICommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RTAPICommand* New() const final {
    return CreateMaybeMessage<RTAPICommand>(NULL);
  }

  RTAPICommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RTAPICommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RTAPICommand& from);
  void MergeFrom(const RTAPICommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTAPICommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argv = 5;
  int argv_size() const;
  void clear_argv();
  static const int kArgvFieldNumber = 5;
  const ::std::string& argv(int index) const;
  ::std::string* mutable_argv(int index);
  void set_argv(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argv(int index, ::std::string&& value);
  #endif
  void set_argv(int index, const char* value);
  void set_argv(int index, const char* value, size_t size);
  ::std::string* add_argv();
  void add_argv(const ::std::string& value);
  #if LANG_CXX11
  void add_argv(::std::string&& value);
  #endif
  void add_argv(const char* value);
  void add_argv(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argv() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argv();

  // optional string modname = 2;
  bool has_modname() const;
  void clear_modname();
  static const int kModnameFieldNumber = 2;
  const ::std::string& modname() const;
  void set_modname(const ::std::string& value);
  #if LANG_CXX11
  void set_modname(::std::string&& value);
  #endif
  void set_modname(const char* value);
  void set_modname(const char* value, size_t size);
  ::std::string* mutable_modname();
  ::std::string* release_modname();
  void set_allocated_modname(::std::string* modname);

  // optional string threadname = 6;
  bool has_threadname() const;
  void clear_threadname();
  static const int kThreadnameFieldNumber = 6;
  const ::std::string& threadname() const;
  void set_threadname(const ::std::string& value);
  #if LANG_CXX11
  void set_threadname(::std::string&& value);
  #endif
  void set_threadname(const char* value);
  void set_threadname(const char* value, size_t size);
  ::std::string* mutable_threadname();
  ::std::string* release_threadname();
  void set_allocated_threadname(::std::string* threadname);

  // optional string comp = 10;
  bool has_comp() const;
  void clear_comp();
  static const int kCompFieldNumber = 10;
  const ::std::string& comp() const;
  void set_comp(const ::std::string& value);
  #if LANG_CXX11
  void set_comp(::std::string&& value);
  #endif
  void set_comp(const char* value);
  void set_comp(const char* value, size_t size);
  ::std::string* mutable_comp();
  ::std::string* release_comp();
  void set_allocated_comp(::std::string* comp);

  // optional string func = 11;
  bool has_func() const;
  void clear_func();
  static const int kFuncFieldNumber = 11;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // optional string instname = 12;
  bool has_instname() const;
  void clear_instname();
  static const int kInstnameFieldNumber = 12;
  const ::std::string& instname() const;
  void set_instname(const ::std::string& value);
  #if LANG_CXX11
  void set_instname(::std::string&& value);
  #endif
  void set_instname(const char* value);
  void set_instname(const char* value, size_t size);
  ::std::string* mutable_instname();
  ::std::string* release_instname();
  void set_allocated_instname(::std::string* instname);

  // required int32 instance = 1;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::int32 instance() const;
  void set_instance(::google::protobuf::int32 value);

  // optional int32 rt_msglevel = 3;
  bool has_rt_msglevel() const;
  void clear_rt_msglevel();
  static const int kRtMsglevelFieldNumber = 3;
  ::google::protobuf::int32 rt_msglevel() const;
  void set_rt_msglevel(::google::protobuf::int32 value);

  // optional int32 user_msglevel = 4;
  bool has_user_msglevel() const;
  void clear_user_msglevel();
  static const int kUserMsglevelFieldNumber = 4;
  ::google::protobuf::int32 user_msglevel() const;
  void set_user_msglevel(::google::protobuf::int32 value);

  // optional int32 threadperiod = 7;
  bool has_threadperiod() const;
  void clear_threadperiod();
  static const int kThreadperiodFieldNumber = 7;
  ::google::protobuf::int32 threadperiod() const;
  void set_threadperiod(::google::protobuf::int32 value);

  // optional bool use_fp = 8;
  bool has_use_fp() const;
  void clear_use_fp();
  static const int kUseFpFieldNumber = 8;
  bool use_fp() const;
  void set_use_fp(bool value);

  // optional int32 cpu = 9;
  bool has_cpu() const;
  void clear_cpu();
  static const int kCpuFieldNumber = 9;
  ::google::protobuf::int32 cpu() const;
  void set_cpu(::google::protobuf::int32 value);

  // optional int32 flags = 13;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 13;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.RTAPICommand)
 private:
  void set_has_instance();
  void clear_has_instance();
  void set_has_modname();
  void clear_has_modname();
  void set_has_rt_msglevel();
  void clear_has_rt_msglevel();
  void set_has_user_msglevel();
  void clear_has_user_msglevel();
  void set_has_threadname();
  void clear_has_threadname();
  void set_has_threadperiod();
  void clear_has_threadperiod();
  void set_has_use_fp();
  void clear_has_use_fp();
  void set_has_cpu();
  void clear_has_cpu();
  void set_has_comp();
  void clear_has_comp();
  void set_has_func();
  void clear_has_func();
  void set_has_instname();
  void clear_has_instname();
  void set_has_flags();
  void clear_has_flags();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argv_;
  ::google::protobuf::internal::ArenaStringPtr modname_;
  ::google::protobuf::internal::ArenaStringPtr threadname_;
  ::google::protobuf::internal::ArenaStringPtr comp_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::internal::ArenaStringPtr instname_;
  ::google::protobuf::int32 instance_;
  ::google::protobuf::int32 rt_msglevel_;
  ::google::protobuf::int32 user_msglevel_;
  ::google::protobuf::int32 threadperiod_;
  bool use_fp_;
  ::google::protobuf::int32 cpu_;
  ::google::protobuf::int32 flags_;
  friend struct ::protobuf_machinetalk_2fprotobuf_2frtapicommand_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RTAPICommand

// required int32 instance = 1;
inline bool RTAPICommand::has_instance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RTAPICommand::set_has_instance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RTAPICommand::clear_has_instance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RTAPICommand::clear_instance() {
  instance_ = 0;
  clear_has_instance();
}
inline ::google::protobuf::int32 RTAPICommand::instance() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.instance)
  return instance_;
}
inline void RTAPICommand::set_instance(::google::protobuf::int32 value) {
  set_has_instance();
  instance_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.instance)
}

// optional string modname = 2;
inline bool RTAPICommand::has_modname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RTAPICommand::set_has_modname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RTAPICommand::clear_has_modname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RTAPICommand::clear_modname() {
  modname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modname();
}
inline const ::std::string& RTAPICommand::modname() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.modname)
  return modname_.GetNoArena();
}
inline void RTAPICommand::set_modname(const ::std::string& value) {
  set_has_modname();
  modname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.modname)
}
#if LANG_CXX11
inline void RTAPICommand::set_modname(::std::string&& value) {
  set_has_modname();
  modname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.RTAPICommand.modname)
}
#endif
inline void RTAPICommand::set_modname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_modname();
  modname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.modname)
}
inline void RTAPICommand::set_modname(const char* value, size_t size) {
  set_has_modname();
  modname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.modname)
}
inline ::std::string* RTAPICommand::mutable_modname() {
  set_has_modname();
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.modname)
  return modname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RTAPICommand::release_modname() {
  // @@protoc_insertion_point(field_release:machinetalk.RTAPICommand.modname)
  if (!has_modname()) {
    return NULL;
  }
  clear_has_modname();
  return modname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RTAPICommand::set_allocated_modname(::std::string* modname) {
  if (modname != NULL) {
    set_has_modname();
  } else {
    clear_has_modname();
  }
  modname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modname);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.RTAPICommand.modname)
}

// optional int32 rt_msglevel = 3;
inline bool RTAPICommand::has_rt_msglevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RTAPICommand::set_has_rt_msglevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RTAPICommand::clear_has_rt_msglevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RTAPICommand::clear_rt_msglevel() {
  rt_msglevel_ = 0;
  clear_has_rt_msglevel();
}
inline ::google::protobuf::int32 RTAPICommand::rt_msglevel() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.rt_msglevel)
  return rt_msglevel_;
}
inline void RTAPICommand::set_rt_msglevel(::google::protobuf::int32 value) {
  set_has_rt_msglevel();
  rt_msglevel_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.rt_msglevel)
}

// optional int32 user_msglevel = 4;
inline bool RTAPICommand::has_user_msglevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RTAPICommand::set_has_user_msglevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RTAPICommand::clear_has_user_msglevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RTAPICommand::clear_user_msglevel() {
  user_msglevel_ = 0;
  clear_has_user_msglevel();
}
inline ::google::protobuf::int32 RTAPICommand::user_msglevel() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.user_msglevel)
  return user_msglevel_;
}
inline void RTAPICommand::set_user_msglevel(::google::protobuf::int32 value) {
  set_has_user_msglevel();
  user_msglevel_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.user_msglevel)
}

// repeated string argv = 5;
inline int RTAPICommand::argv_size() const {
  return argv_.size();
}
inline void RTAPICommand::clear_argv() {
  argv_.Clear();
}
inline const ::std::string& RTAPICommand::argv(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.argv)
  return argv_.Get(index);
}
inline ::std::string* RTAPICommand::mutable_argv(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.argv)
  return argv_.Mutable(index);
}
inline void RTAPICommand::set_argv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.argv)
  argv_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RTAPICommand::set_argv(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.argv)
  argv_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RTAPICommand::set_argv(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.argv)
}
inline void RTAPICommand::set_argv(int index, const char* value, size_t size) {
  argv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.argv)
}
inline ::std::string* RTAPICommand::add_argv() {
  // @@protoc_insertion_point(field_add_mutable:machinetalk.RTAPICommand.argv)
  return argv_.Add();
}
inline void RTAPICommand::add_argv(const ::std::string& value) {
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:machinetalk.RTAPICommand.argv)
}
#if LANG_CXX11
inline void RTAPICommand::add_argv(::std::string&& value) {
  argv_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:machinetalk.RTAPICommand.argv)
}
#endif
inline void RTAPICommand::add_argv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:machinetalk.RTAPICommand.argv)
}
inline void RTAPICommand::add_argv(const char* value, size_t size) {
  argv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:machinetalk.RTAPICommand.argv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RTAPICommand::argv() const {
  // @@protoc_insertion_point(field_list:machinetalk.RTAPICommand.argv)
  return argv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RTAPICommand::mutable_argv() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.RTAPICommand.argv)
  return &argv_;
}

// optional string threadname = 6;
inline bool RTAPICommand::has_threadname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RTAPICommand::set_has_threadname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RTAPICommand::clear_has_threadname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RTAPICommand::clear_threadname() {
  threadname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_threadname();
}
inline const ::std::string& RTAPICommand::threadname() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.threadname)
  return threadname_.GetNoArena();
}
inline void RTAPICommand::set_threadname(const ::std::string& value) {
  set_has_threadname();
  threadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.threadname)
}
#if LANG_CXX11
inline void RTAPICommand::set_threadname(::std::string&& value) {
  set_has_threadname();
  threadname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.RTAPICommand.threadname)
}
#endif
inline void RTAPICommand::set_threadname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_threadname();
  threadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.threadname)
}
inline void RTAPICommand::set_threadname(const char* value, size_t size) {
  set_has_threadname();
  threadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.threadname)
}
inline ::std::string* RTAPICommand::mutable_threadname() {
  set_has_threadname();
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.threadname)
  return threadname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RTAPICommand::release_threadname() {
  // @@protoc_insertion_point(field_release:machinetalk.RTAPICommand.threadname)
  if (!has_threadname()) {
    return NULL;
  }
  clear_has_threadname();
  return threadname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RTAPICommand::set_allocated_threadname(::std::string* threadname) {
  if (threadname != NULL) {
    set_has_threadname();
  } else {
    clear_has_threadname();
  }
  threadname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), threadname);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.RTAPICommand.threadname)
}

// optional int32 threadperiod = 7;
inline bool RTAPICommand::has_threadperiod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RTAPICommand::set_has_threadperiod() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RTAPICommand::clear_has_threadperiod() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RTAPICommand::clear_threadperiod() {
  threadperiod_ = 0;
  clear_has_threadperiod();
}
inline ::google::protobuf::int32 RTAPICommand::threadperiod() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.threadperiod)
  return threadperiod_;
}
inline void RTAPICommand::set_threadperiod(::google::protobuf::int32 value) {
  set_has_threadperiod();
  threadperiod_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.threadperiod)
}

// optional bool use_fp = 8;
inline bool RTAPICommand::has_use_fp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RTAPICommand::set_has_use_fp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RTAPICommand::clear_has_use_fp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RTAPICommand::clear_use_fp() {
  use_fp_ = false;
  clear_has_use_fp();
}
inline bool RTAPICommand::use_fp() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.use_fp)
  return use_fp_;
}
inline void RTAPICommand::set_use_fp(bool value) {
  set_has_use_fp();
  use_fp_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.use_fp)
}

// optional int32 cpu = 9;
inline bool RTAPICommand::has_cpu() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RTAPICommand::set_has_cpu() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RTAPICommand::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RTAPICommand::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline ::google::protobuf::int32 RTAPICommand::cpu() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.cpu)
  return cpu_;
}
inline void RTAPICommand::set_cpu(::google::protobuf::int32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.cpu)
}

// optional string comp = 10;
inline bool RTAPICommand::has_comp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RTAPICommand::set_has_comp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RTAPICommand::clear_has_comp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RTAPICommand::clear_comp() {
  comp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comp();
}
inline const ::std::string& RTAPICommand::comp() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.comp)
  return comp_.GetNoArena();
}
inline void RTAPICommand::set_comp(const ::std::string& value) {
  set_has_comp();
  comp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.comp)
}
#if LANG_CXX11
inline void RTAPICommand::set_comp(::std::string&& value) {
  set_has_comp();
  comp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.RTAPICommand.comp)
}
#endif
inline void RTAPICommand::set_comp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comp();
  comp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.comp)
}
inline void RTAPICommand::set_comp(const char* value, size_t size) {
  set_has_comp();
  comp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.comp)
}
inline ::std::string* RTAPICommand::mutable_comp() {
  set_has_comp();
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.comp)
  return comp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RTAPICommand::release_comp() {
  // @@protoc_insertion_point(field_release:machinetalk.RTAPICommand.comp)
  if (!has_comp()) {
    return NULL;
  }
  clear_has_comp();
  return comp_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RTAPICommand::set_allocated_comp(::std::string* comp) {
  if (comp != NULL) {
    set_has_comp();
  } else {
    clear_has_comp();
  }
  comp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comp);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.RTAPICommand.comp)
}

// optional string func = 11;
inline bool RTAPICommand::has_func() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RTAPICommand::set_has_func() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RTAPICommand::clear_has_func() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RTAPICommand::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func();
}
inline const ::std::string& RTAPICommand::func() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.func)
  return func_.GetNoArena();
}
inline void RTAPICommand::set_func(const ::std::string& value) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.func)
}
#if LANG_CXX11
inline void RTAPICommand::set_func(::std::string&& value) {
  set_has_func();
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.RTAPICommand.func)
}
#endif
inline void RTAPICommand::set_func(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.func)
}
inline void RTAPICommand::set_func(const char* value, size_t size) {
  set_has_func();
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.func)
}
inline ::std::string* RTAPICommand::mutable_func() {
  set_has_func();
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RTAPICommand::release_func() {
  // @@protoc_insertion_point(field_release:machinetalk.RTAPICommand.func)
  if (!has_func()) {
    return NULL;
  }
  clear_has_func();
  return func_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RTAPICommand::set_allocated_func(::std::string* func) {
  if (func != NULL) {
    set_has_func();
  } else {
    clear_has_func();
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.RTAPICommand.func)
}

// optional string instname = 12;
inline bool RTAPICommand::has_instname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RTAPICommand::set_has_instname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RTAPICommand::clear_has_instname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RTAPICommand::clear_instname() {
  instname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instname();
}
inline const ::std::string& RTAPICommand::instname() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.instname)
  return instname_.GetNoArena();
}
inline void RTAPICommand::set_instname(const ::std::string& value) {
  set_has_instname();
  instname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.instname)
}
#if LANG_CXX11
inline void RTAPICommand::set_instname(::std::string&& value) {
  set_has_instname();
  instname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:machinetalk.RTAPICommand.instname)
}
#endif
inline void RTAPICommand::set_instname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instname();
  instname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:machinetalk.RTAPICommand.instname)
}
inline void RTAPICommand::set_instname(const char* value, size_t size) {
  set_has_instname();
  instname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:machinetalk.RTAPICommand.instname)
}
inline ::std::string* RTAPICommand::mutable_instname() {
  set_has_instname();
  // @@protoc_insertion_point(field_mutable:machinetalk.RTAPICommand.instname)
  return instname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RTAPICommand::release_instname() {
  // @@protoc_insertion_point(field_release:machinetalk.RTAPICommand.instname)
  if (!has_instname()) {
    return NULL;
  }
  clear_has_instname();
  return instname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RTAPICommand::set_allocated_instname(::std::string* instname) {
  if (instname != NULL) {
    set_has_instname();
  } else {
    clear_has_instname();
  }
  instname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instname);
  // @@protoc_insertion_point(field_set_allocated:machinetalk.RTAPICommand.instname)
}

// optional int32 flags = 13;
inline bool RTAPICommand::has_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RTAPICommand::set_has_flags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RTAPICommand::clear_has_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RTAPICommand::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 RTAPICommand::flags() const {
  // @@protoc_insertion_point(field_get:machinetalk.RTAPICommand.flags)
  return flags_;
}
inline void RTAPICommand::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.RTAPICommand.flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_machinetalk_2fprotobuf_2frtapicommand_2eproto
