# Options

cmake_minimum_required(VERSION 2.8)
# Option to build asciidoc documentation
option( WITH_DOC "Build asciidoc documentation" ON )

# Option to build unstable development code
option( WITH_DEV "Build unstable development code" ON )

# Option to hardware drivers
option( WITH_DRIVERS "Build the hardware drivers" ON )

# Option to build the emcweb interface
option( WITH_EMCWEB "Build the emcweb interface" ON )

# Option to build included programming examples
option( WITH_EXAMPLES "Build included programming examples" ON )

# Option to enable the parts of Machinekit that depend on GTK
option( WITH_GTK "Enable the parts of Machinekit that depend on GTK" ON )

# Option to not use NLS
option( WITH_NLS "Enable NLS" ON )

# Option to enable NML-using parts
option( WITH_NML "Enable NML" ON )

# Option to build hal_parport using the ppdev ioctl instead of inb/outb
option( WITH_PORTABLE_PARPORT "Build hal_parport using the ppdev ioctl instead of inb/outb" OFF )

# Option to build Javascript bindings based on https://github.com/dcodeIO/ProtoBuf.js/wiki
option( WITH_PROTO_JS "Build Javascript bindings based on https://github.com/dcodeIO/ProtoBuf.js/wiki" ON )

# Option to enable python-pydot graphing
option( WITH_PYDOT "Enable python-pydot graphing" ON )

# Option to enable the parts of Machinekit that depend on Python
option( WITH_PYTHON "Enable the parts of Machinekit that depend on Python" ON )

# Option to enable remote zeroMQ services
option( WITH_REMOTE "Enable remote zeroMQ services" OFF )

# Option to use the common shared memory driver kernel module
option( WITH_SHMDRV "Use the common shared memory driver kernel module" OFF )

# Option to build PCI drivers with usermode PCI support
option( WITH_USERMODE_PCI "Build PCI drivers with usermode PCI support" OFF )

# Option to enable webtalk
option( WITH_WEBTALK "Enable webtalk" ON )

option(WITH_PC "Build for PC platform (default)" ON)
option(WITH_BEAGLEBONE "Build for Beaglebone platform" OFF)
option(WITH_CHIP "Build for Chip platform" OFF)
option(WITH_H3 "Build for H3 SoC platform" OFF)
option(WITH_RASPBERRY "Build for Raspberry" OFF)
option(WITH_SOCFPGA "Build for Socfpga platform" OFF)
option(WITH_ZEDBOARD "Build for Zedboard platform" OFF)

if(WITH_PC)
    set(TARGET_PLATFORM_PC 1)
elseif(WITH_BEAGLEBONE)
    set(TARGET_PLATFORM_BEAGLEBONE 1)
elseif(WITH_CHIP)
    set(TARGET_PLATFORM_CHIP 1)
elseif(WITH_H3)
    set(TARGET_PLATFORM_H3 1)
elseif(WITH_RASPBERRY)
    set(TARGET_PLATFORM_RASPBERRY 1)
elseif(WITH_SOCFPGA)
    set(TARGET_PLATFORM_SOCFPGA 1)
elseif(WITH_ZEDBOARD)
    set(TARGET_PLATFORM_ZEDBOARD 1)
endif()

option(WITH_POSIX_THREADS "Build with POSIX thread support" ON)
option(WITH_RT_PREEMPT_THREADS "Build with RT_PREEMPT thread support" OFF)
option(WITH_XENOMAI_THREADS "Build with Xenomai userland thread support" OFF)
option(WITH_XENOMAI_KERNEL_THREADS "Build Xenomai kernel thread support" OFF)
option(WITH_RTAI_KERNEL_THREADS "Build RTAI thread support" OFF)

if(WITH_POSIX_THREADS)
    set(POSIX_THREADS)
    file(APPEND ${CONFIG_H} "#define HAVE_POSIX_THREADS  \n\n ")
elseif(WITH_RT_PREEMPT_THREADS)
    set(RT_PREEMPT_THREADS)
    file(APPEND ${CONFIG_H} "#define HAVE_RT_PREEMPT_THREADS  \n\n ")
elseif(WITH_XENOMAI_THREADS)
    set(XENOMAI_THREADS)
    file(APPEND ${CONFIG_H} "#define HAVE_XENOMAI_THREADS  \n\n ")
elseif(WITH_XENOMAI_KERNEL_THREADS)
    set(XENOMAI_KERNEL_THREAD)
    file(APPEND ${CONFIG_H} "#define HAVE_XENOMAI_KERNEL_THREADS  \n\n ")
elseif(WITH_RTAI_KERNEL_THREADS)
    set(RTAI_KERNEL_THREADS)
    file(APPEND ${CONFIG_H} "#define HAVE_RTAI_KERNEL_THREADS  \n\n ")
endif()

#file(APPEND ${CONFIG_H} "/* Xenomai v.2 */\n")
#file(APPEND ${CONFIG_H} "#define XENOMAI_V2  \n\n ")

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( WITH_DOC )
    message(" DOC Enabled")
    file(APPEND ${CONFIG_H} "/* Build asciidoc documentation. */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_BUILD_DOCUMENTATION \n\n")
  endif( WITH_DOC )
if( WITH_DEV )
    message(" DEV Enabled")
    file(APPEND ${CONFIG_H} "/* build unstable development code */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DEV \n\n")
## !!! WARNING HAVE_LIBUDEV Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define HAVE_LIBUDEV\n\n")
endif( WITH_DEV )
if( WITH_DRIVERS )
    message(" DRIVERS Enabled")
    file(APPEND ${CONFIG_H} "/* hardware drivers */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DRIVERS \n\n")
## !!! WARNING BUILD_DRIVERS Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define BUILD_DRIVERS\n\n")
endif( WITH_DRIVERS )
if( WITH_EMCWEB )
    message(" EMCWEB Enabled")
    file(APPEND ${CONFIG_H} "/* build the emcweb interface */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_EMCWEB \n\n")
## !!! WARNING BUILD_EMCWEB Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define BUILD_EMCWEB\n\n")
endif( WITH_EMCWEB )
if( WITH_EXAMPLES )
    message(" EXAMPLES Enabled")
    file(APPEND ${CONFIG_H} "/* build included programming examples */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_EXAMPLES \n\n")
## !!! WARNING BUILD_EXAMPLES Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define BUILD_EXAMPLES\n\n")
endif( WITH_EXAMPLES )
if( WITH_GTK )
    message(" GTK Enabled")
    file(APPEND ${CONFIG_H} "/* Enable the parts of Machinekit that depend on GTK */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_GTK \n\n")
## !!! WARNING HAVE_GTK Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define HAVE_GTK\n\n")
endif( WITH_GTK )
if( WITH_NLS )
    message(" NLS Enabled")
    file(APPEND ${CONFIG_H} "/* don't use NLS */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_NLS \n\n")
endif( WITH_NLS )
if( WITH_NML )
    message(" NML Enabled")
    file(APPEND ${CONFIG_H} "/* enable NML-using parts */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_NML \n\n")
## !!! WARNING BUILD_NMLDEP Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define BUILD_NMLDEP\n\n")
endif( WITH_NML )
if( WITH_PORTABLE_PARPORT )
    message(" PORTABLE_PARPORT Enabled")
    file(APPEND ${CONFIG_H} "/* Build hal_parport using the ppdev ioctl instead of inb/outb */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PORTABLE_PARPORT \n\n")
## !!! WARNING USE_PORTABLE_PARPORT_IO Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define USE_PORTABLE_PARPORT_IO\n\n")
endif( WITH_PORTABLE_PARPORT )
if( WITH_PROTO_JS )
    message(" PROTO_JS Enabled")
    file(APPEND ${CONFIG_H} "/* build Javascript bindings based on https://github.com/dcodeIO/ProtoBuf.js/wiki */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PROTO_JS \n\n")
endif( WITH_PROTO_JS )
if( WITH_PYDOT )
    message(" PYDOT Enabled")
    file(APPEND ${CONFIG_H} "/* enable python-pydot graphing */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PYDOT \n\n")
endif( WITH_PYDOT )
if( WITH_PYTHON )
    message(" PYTHON Enabled")
    file(APPEND ${CONFIG_H} "/* Enable the parts of Machinekit that depend on Python */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PYTHON \n\n")
endif( WITH_PYTHON )
if( WITH_REMOTE )
    message(" REMOTE Enabled")
    file(APPEND ${CONFIG_H} "/* enable remote zeroMQ services */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_REMOTE \n\n")
endif( WITH_REMOTE )
if( WITH_SHMDRV )
    message(" SHMDRV Enabled")
    file(APPEND ${CONFIG_H} "/* use the common shared memory driver kernel module */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_SHMDRV \n\n")
## !!! WARNING USE_SHMDRV Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define USE_SHMDRV\n\n")
endif( WITH_SHMDRV )
if( WITH_USERMODE_PCI )
    message(" USERMODE_PCI Enabled")
    file(APPEND ${CONFIG_H} "/* Build PCI drivers with usermode PCI support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_USERMODE_PCI \n\n")
## !!! WARNING USERMODE_PCI Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define USERMODE_PCI\n\n")
endif( WITH_USERMODE_PCI )
if( WITH_WEBTALK )
    message(" WEBTALK Enabled")
    file(APPEND ${CONFIG_H} "/* AS_HELP_STRING--enable-webtalk="ARG" */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_[WEBTALK] \n\n")
endif( WITH_WEBTALK )

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )
